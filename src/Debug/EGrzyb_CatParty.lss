
AVRASM ver. 2.2.6  E:\EGrzyb_CatParty\EGrzyb_CatParty\main.asm Fri Dec 07 11:43:40 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m328PBdef.inc'
E:\EGrzyb_CatParty\EGrzyb_CatParty\main.asm(350): Including file 'E:\EGrzyb_CatParty\EGrzyb_CatParty\lib_delay.asm'
E:\EGrzyb_CatParty\EGrzyb_CatParty\main.asm(351): Including file 'E:\EGrzyb_CatParty\EGrzyb_CatParty\lib_SSD1306_OLED.asm'
E:\EGrzyb_CatParty\EGrzyb_CatParty\lib_SSD1306_OLED.asm(21): Including file 'E:\EGrzyb_CatParty\EGrzyb_CatParty\lib_SPI.asm'
E:\EGrzyb_CatParty\EGrzyb_CatParty\main.asm(352): Including file 'E:\EGrzyb_CatParty\EGrzyb_CatParty\lib_GFX.asm'
E:\EGrzyb_CatParty\EGrzyb_CatParty\lib_GFX.asm(19): Including file 'E:\EGrzyb_CatParty\EGrzyb_CatParty\character_map.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m328PBdef.inc'
E:\EGrzyb_CatParty\EGrzyb_CatParty\main.asm(350): Including file 'E:\EGrzyb_CatParty\EGrzyb_CatParty\lib_delay.asm'
E:\EGrzyb_CatParty\EGrzyb_CatParty\main.asm(351): Including file 'E:\EGrzyb_CatParty\EGrzyb_CatParty\lib_SSD1306_OLED.asm'
E:\EGrzyb_CatParty\EGrzyb_CatParty\lib_SSD1306_OLED.asm(21): Including file 'E:\EGrzyb_CatParty\EGrzyb_CatParty\lib_SPI.asm'
E:\EGrzyb_CatParty\EGrzyb_CatParty\main.asm(352): Including file 'E:\EGrzyb_CatParty\EGrzyb_CatParty\lib_GFX.asm'
E:\EGrzyb_CatParty\EGrzyb_CatParty\lib_GFX.asm(19): Including file 'E:\EGrzyb_CatParty\EGrzyb_CatParty\character_map.asm'
                                 
                                 ;
                                 
                                 
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;*
                                 ;* Number            : AVR000
                                 ;* File Name         : m328PBdef.inc
                                 ;* Title             : Register/Bit Definitions for the ATmega328PB
                                 ;* Created           : 2016-12-14 16:07
                                 ;* Version           : 1.00
                                 ;* Support e-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328PB
                                 ;*
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal
                                 ;* SRAM is also defined
                                 ;*
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PBDEF_INC_
                                 #define _M328PBDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device	ATmega328PB
                                 #pragma AVRPART ADMIN PART_NAME ATmega328PB
                                 .equ	SIGNATURE_000	= 0x1E
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x16
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED" are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	TWAMR1	= 0xDD ; MEMORY MAPPED
                                 .equ	TWCR1	= 0xDC ; MEMORY MAPPED
                                 .equ	TWDR1	= 0xDB ; MEMORY MAPPED
                                 .equ	TWAR1	= 0xDA ; MEMORY MAPPED
                                 .equ	TWSR1	= 0xD9 ; MEMORY MAPPED
                                 .equ	TWBR1	= 0xD8 ; MEMORY MAPPED
                                 .equ	UDR1	= 0xCE ; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xCD ; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xCC ; MEMORY MAPPED
                                 .equ	UCSR1D	= 0xCB ; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xCA ; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xC9 ; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xC8 ; MEMORY MAPPED
                                 .equ	UDR0	= 0xC6 ; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xC5 ; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xC4 ; MEMORY MAPPED
                                 .equ	UCSR0D	= 0xC3 ; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xC2 ; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xC1 ; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xC0 ; MEMORY MAPPED
                                 .equ	TWAMR0	= 0xBD ; MEMORY MAPPED
                                 .equ	TWCR0	= 0xBC ; MEMORY MAPPED
                                 .equ	TWDR0	= 0xBB ; MEMORY MAPPED
                                 .equ	TWAR0	= 0xBA ; MEMORY MAPPED
                                 .equ	TWSR0	= 0xB9 ; MEMORY MAPPED
                                 .equ	TWBR0	= 0xB8 ; MEMORY MAPPED
                                 .equ	ASSR	= 0xB6 ; MEMORY MAPPED
                                 .equ	OCR2B	= 0xB4 ; MEMORY MAPPED
                                 .equ	OCR2A	= 0xB3 ; MEMORY MAPPED
                                 .equ	TCNT2	= 0xB2 ; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xB1 ; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xB0 ; MEMORY MAPPED
                                 .equ	SPDR1	= 0xAE ; MEMORY MAPPED
                                 .equ	SPSR1	= 0xAD ; MEMORY MAPPED
                                 .equ	SPCR1	= 0xAC ; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xAB ; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xAA ; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xA9 ; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xA8 ; MEMORY MAPPED
                                 .equ	ICR4H	= 0xA7 ; MEMORY MAPPED
                                 .equ	ICR4L	= 0xA6 ; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xA5 ; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xA4 ; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xA2 ; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xA1 ; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xA0 ; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9B ; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9A ; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99 ; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98 ; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97 ; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96 ; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95 ; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94 ; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92 ; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91 ; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90 ; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8B ; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8A ; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89 ; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88 ; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87 ; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86 ; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85 ; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84 ; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82 ; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81 ; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80 ; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7F ; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7E ; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7C ; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7B ; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7A ; MEMORY MAPPED
                                 .equ	ADCH	= 0x79 ; MEMORY MAPPED
                                 .equ	ADCL	= 0x78 ; MEMORY MAPPED
                                 .equ	PCMSK3	= 0x73 ; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72 ; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71 ; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70 ; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6F ; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6E ; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6D ; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6C ; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6B ; MEMORY MAPPED
                                 .equ	EICRA	= 0x69 ; MEMORY MAPPED
                                 .equ	PCICR	= 0x68 ; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66 ; MEMORY MAPPED
                                 .equ	PRR1	= 0x65 ; MEMORY MAPPED
                                 .equ	PRR0	= 0x64 ; MEMORY MAPPED
                                 .equ	XFDCSR	= 0x62 ; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61 ; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60 ; MEMORY MAPPED
                                 .equ	SREG	= 0x3F ; 
                                 .equ	SPH	= 0x3E ; 
                                 .equ	SPL	= 0x3D ; 
                                 .equ	SPMCSR	= 0x37 ; 
                                 .equ	MCUCR	= 0x35 ; 
                                 .equ	MCUSR	= 0x34 ; 
                                 .equ	SMCR	= 0x33 ; 
                                 .equ	ACSRA	= 0x30 ; 
                                 .equ	ACSR	= 0x30 ; 
                                 .equ	ACSRB	= 0x2F ; 
                                 .equ	SPDR0	= 0x2E ; 
                                 .equ	SPSR0	= 0x2D ; 
                                 .equ	SPCR0	= 0x2C ; 
                                 .equ	GPIOR2	= 0x2B ; 
                                 .equ	GPIOR1	= 0x2A ; 
                                 .equ	OCR0B	= 0x28 ; 
                                 .equ	OCR0A	= 0x27 ; 
                                 .equ	TCNT0	= 0x26 ; 
                                 .equ	TCCR0B	= 0x25 ; 
                                 .equ	TCCR0A	= 0x24 ; 
                                 .equ	GTCCR	= 0x23 ; 
                                 .equ	EEARH	= 0x22 ; 
                                 .equ	EEARL	= 0x21 ; 
                                 .equ	EEDR	= 0x20 ; 
                                 .equ	EECR	= 0x1F ; 
                                 .equ	GPIOR0	= 0x1E ; 
                                 .equ	EIMSK	= 0x1D ; 
                                 .equ	EIFR	= 0x1C ; 
                                 .equ	PCIFR	= 0x1B ; 
                                 .equ	TIFR4	= 0x19 ; 
                                 .equ	TIFR3	= 0x18 ; 
                                 .equ	TIFR2	= 0x17 ; 
                                 .equ	TIFR1	= 0x16 ; 
                                 .equ	TIFR0	= 0x15 ; 
                                 .equ	PORTE	= 0x0E ; 
                                 .equ	DDRE	= 0x0D ; 
                                 .equ	PINE	= 0x0C ; 
                                 .equ	PORTD	= 0x0B ; 
                                 .equ	DDRD	= 0x0A ; 
                                 .equ	PIND	= 0x09 ; 
                                 .equ	PORTC	= 0x08 ; 
                                 .equ	DDRC	= 0x07 ; 
                                 .equ	PINC	= 0x06 ; 
                                 .equ	PORTB	= 0x05 ; 
                                 .equ	DDRB	= 0x04 ; 
                                 .equ	PINB	= 0x03 ; 
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 *****************
                                 ; UDR0 - USART I/O Data Register 0
                                 .equ	UDR00	= 0 ; USART I/O Data Register 0 Bit 0
                                 .equ	UDR01	= 1 ; USART I/O Data Register 0 Bit 1
                                 .equ	UDR02	= 2 ; USART I/O Data Register 0 Bit 2
                                 .equ	UDR03	= 3 ; USART I/O Data Register 0 Bit 3
                                 .equ	UDR04	= 4 ; USART I/O Data Register 0 Bit 4
                                 .equ	UDR05	= 5 ; USART I/O Data Register 0 Bit 5
                                 .equ	UDR06	= 6 ; USART I/O Data Register 0 Bit 6
                                 .equ	UDR07	= 7 ; USART I/O Data Register 0 Bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0 ; Multi-processor Communication Mode
                                 .equ	U2X0	= 1 ; Double the USART transmission speed
                                 .equ	UPE0	= 2 ; Parity Error
                                 .equ	DOR0	= 3 ; Data overRun
                                 .equ	FE0	= 4 ; Framing Error
                                 .equ	UDRE0	= 5 ; USART Data Register Empty
                                 .equ	TXC0	= 6 ; USART Transmitt Complete
                                 .equ	RXC0	= 7 ; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0 ; Transmit Data Bit 8
                                 .equ	RXB80	= 1 ; Receive Data Bit 8
                                 .equ	UCSZ02	= 2 ; Character Size
                                 .equ	TXEN0	= 3 ; Transmitter Enable
                                 .equ	RXEN0	= 4 ; Receiver Enable
                                 .equ	UDRIE0	= 5 ; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6 ; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7 ; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0 ; Clock Polarity
                                 .equ	UCSZ00	= 1 ; Character Size
                                 .equ	UCSZ01	= 2 ; Character Size
                                 .equ	USBS0	= 3 ; Stop Bit Select
                                 .equ	UPM00	= 4 ; Parity Mode Bits
                                 .equ	UPM01	= 5 ; Parity Mode Bits
                                 .equ	UMSEL00	= 6 ; USART Mode Select
                                 .equ	UMSEL01	= 7 ; USART Mode Select
                                 
                                 ; UCSR0D - USART Control and Status Register D
                                 .equ	SFDE	= 5 ; Start frame detection enable
                                 .equ	RXS	= 6 ; USART RX Start
                                 .equ	RXSIE	= 7 ; USART RX Start Interrupt Enable
                                 
                                 ; UBRR0 - USART Baud Rate Register Bytes
                                 .equ	UBRR0H0	= 0 ; USART Baud Rate Register Bytes High Bit 8
                                 .equ	UBRR0H1	= 1 ; USART Baud Rate Register Bytes High Bit 9
                                 .equ	UBRR0H2	= 2 ; USART Baud Rate Register Bytes High Bit 10
                                 .equ	UBRR0H3	= 3 ; USART Baud Rate Register Bytes High Bit 11
                                 
                                 .equ	UBRR0L0	= 0 ; USART Baud Rate Register Bytes Low Bit 0
                                 .equ	UBRR0L1	= 1 ; USART Baud Rate Register Bytes Low Bit 1
                                 .equ	UBRR0L2	= 2 ; USART Baud Rate Register Bytes Low Bit 2
                                 .equ	UBRR0L3	= 3 ; USART Baud Rate Register Bytes Low Bit 3
                                 .equ	UBRR0L4	= 4 ; USART Baud Rate Register Bytes Low Bit 4
                                 .equ	UBRR0L5	= 5 ; USART Baud Rate Register Bytes Low Bit 5
                                 .equ	UBRR0L6	= 6 ; USART Baud Rate Register Bytes Low Bit 6
                                 .equ	UBRR0L7	= 7 ; USART Baud Rate Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** USART1 *****************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0 ; USART I/O Data Register Bit 0
                                 .equ	UDR11	= 1 ; USART I/O Data Register Bit 1
                                 .equ	UDR12	= 2 ; USART I/O Data Register Bit 2
                                 .equ	UDR13	= 3 ; USART I/O Data Register Bit 3
                                 .equ	UDR14	= 4 ; USART I/O Data Register Bit 4
                                 .equ	UDR15	= 5 ; USART I/O Data Register Bit 5
                                 .equ	UDR16	= 6 ; USART I/O Data Register Bit 6
                                 .equ	UDR17	= 7 ; USART I/O Data Register Bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0 ; Multi-processor Communication Mode
                                 .equ	U2X1	= 1 ; Double the USART transmission speed
                                 .equ	UPE1	= 2 ; Parity Error
                                 .equ	DOR1	= 3 ; Data overRun
                                 .equ	FE1	= 4 ; Framing Error
                                 .equ	UDRE1	= 5 ; USART Data Register Empty
                                 .equ	TXC1	= 6 ; USART Transmitt Complete
                                 .equ	RXC1	= 7 ; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0 ; Transmit Data Bit 8
                                 .equ	RXB81	= 1 ; Receive Data Bit 8
                                 .equ	UCSZ12	= 2 ; Character Size
                                 .equ	TXEN1	= 3 ; Transmitter Enable
                                 .equ	RXEN1	= 4 ; Receiver Enable
                                 .equ	UDRIE1	= 5 ; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6 ; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7 ; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0 ; Clock Polarity
                                 .equ	UCSZ10	= 1 ; Character Size
                                 .equ	UCSZ11	= 2 ; Character Size
                                 .equ	USBS1	= 3 ; Stop Bit Select
                                 .equ	UPM10	= 4 ; Parity Mode Bits
                                 .equ	UPM11	= 5 ; Parity Mode Bits
                                 .equ	UMSEL10	= 6 ; USART Mode Select
                                 .equ	UMSEL11	= 7 ; USART Mode Select
                                 
                                 ; UCSR1D - USART Control and Status Register D
                                 .equ	SFDE1	= 5 ; Start frame detection enable
                                 .equ	RXS1	= 6 ; USART RX Start
                                 .equ	RXSIE1	= 7 ; USART RX Start Interrupt Enable
                                 
                                 ; UBRR1 - USART Baud Rate Register Bytes
                                 .equ	UBRR1H0	= 0 ; USART Baud Rate Register Bytes High Bit 8
                                 .equ	UBRR1H1	= 1 ; USART Baud Rate Register Bytes High Bit 9
                                 .equ	UBRR1H2	= 2 ; USART Baud Rate Register Bytes High Bit 10
                                 .equ	UBRR1H3	= 3 ; USART Baud Rate Register Bytes High Bit 11
                                 
                                 .equ	UBRR1L0	= 0 ; USART Baud Rate Register Bytes Low Bit 0
                                 .equ	UBRR1L1	= 1 ; USART Baud Rate Register Bytes Low Bit 1
                                 .equ	UBRR1L2	= 2 ; USART Baud Rate Register Bytes Low Bit 2
                                 .equ	UBRR1L3	= 3 ; USART Baud Rate Register Bytes Low Bit 3
                                 .equ	UBRR1L4	= 4 ; USART Baud Rate Register Bytes Low Bit 4
                                 .equ	UBRR1L5	= 5 ; USART Baud Rate Register Bytes Low Bit 5
                                 .equ	UBRR1L6	= 6 ; USART Baud Rate Register Bytes Low Bit 6
                                 .equ	UBRR1L7	= 7 ; USART Baud Rate Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** TWI0 *****************
                                 ; TWAMR0 - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1 ; 
                                 .equ	TWAM1	= 2 ; 
                                 .equ	TWAM2	= 3 ; 
                                 .equ	TWAM3	= 4 ; 
                                 .equ	TWAM4	= 5 ; 
                                 .equ	TWAM5	= 6 ; 
                                 .equ	TWAM6	= 7 ; 
                                 
                                 ; TWBR0 - TWI Bit Rate register
                                 .equ	TWBR00	= 0 ; TWI Bit Rate register Bit 0
                                 .equ	TWBR01	= 1 ; TWI Bit Rate register Bit 1
                                 .equ	TWBR02	= 2 ; TWI Bit Rate register Bit 2
                                 .equ	TWBR03	= 3 ; TWI Bit Rate register Bit 3
                                 .equ	TWBR04	= 4 ; TWI Bit Rate register Bit 4
                                 .equ	TWBR05	= 5 ; TWI Bit Rate register Bit 5
                                 .equ	TWBR06	= 6 ; TWI Bit Rate register Bit 6
                                 .equ	TWBR07	= 7 ; TWI Bit Rate register Bit 7
                                 
                                 ; TWCR0 - TWI Control Register
                                 .equ	TWIE	= 0 ; TWI Interrupt Enable
                                 .equ	TWEN	= 2 ; TWI Enable Bit
                                 .equ	TWWC	= 3 ; TWI Write Collition Flag
                                 .equ	TWSTO	= 4 ; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5 ; TWI Start Condition Bit
                                 .equ	TWEA	= 6 ; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7 ; TWI Interrupt Flag
                                 
                                 ; TWSR0 - TWI Status Register
                                 .equ	TWPS0	= 0 ; TWI Prescaler
                                 .equ	TWPS1	= 1 ; TWI Prescaler
                                 .equ	TWS3	= 3 ; TWI Status
                                 .equ	TWS4	= 4 ; TWI Status
                                 .equ	TWS5	= 5 ; TWI Status
                                 .equ	TWS6	= 6 ; TWI Status
                                 .equ	TWS7	= 7 ; TWI Status
                                 
                                 ; TWDR0 - TWI Data register
                                 .equ	TWDR00	= 0 ; TWI Data register Bit 0
                                 .equ	TWDR01	= 1 ; TWI Data register Bit 1
                                 .equ	TWDR02	= 2 ; TWI Data register Bit 2
                                 .equ	TWDR03	= 3 ; TWI Data register Bit 3
                                 .equ	TWDR04	= 4 ; TWI Data register Bit 4
                                 .equ	TWDR05	= 5 ; TWI Data register Bit 5
                                 .equ	TWDR06	= 6 ; TWI Data register Bit 6
                                 .equ	TWDR07	= 7 ; TWI Data register Bit 7
                                 
                                 ; TWAR0 - TWI (Slave) Address register
                                 .equ	TWGCE	= 0 ; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1 ; TWI (Slave) Address register Bits
                                 .equ	TWA1	= 2 ; TWI (Slave) Address register Bits
                                 .equ	TWA2	= 3 ; TWI (Slave) Address register Bits
                                 .equ	TWA3	= 4 ; TWI (Slave) Address register Bits
                                 .equ	TWA4	= 5 ; TWI (Slave) Address register Bits
                                 .equ	TWA5	= 6 ; TWI (Slave) Address register Bits
                                 .equ	TWA6	= 7 ; TWI (Slave) Address register Bits
                                 
                                 
                                 ; ***** TWI1 *****************
                                 ; TWAMR1 - TWI (Slave) Address Mask Register
                                 .equ	TWAM10	= 1 ; 
                                 .equ	TWAM11	= 2 ; 
                                 .equ	TWAM12	= 3 ; 
                                 .equ	TWAM13	= 4 ; 
                                 .equ	TWAM14	= 5 ; 
                                 .equ	TWAM15	= 6 ; 
                                 .equ	TWAM16	= 7 ; 
                                 
                                 ; TWBR1 - TWI Bit Rate register
                                 .equ	TWBR10	= 0 ; TWI Bit Rate register Bit 0
                                 .equ	TWBR11	= 1 ; TWI Bit Rate register Bit 1
                                 .equ	TWBR12	= 2 ; TWI Bit Rate register Bit 2
                                 .equ	TWBR13	= 3 ; TWI Bit Rate register Bit 3
                                 .equ	TWBR14	= 4 ; TWI Bit Rate register Bit 4
                                 .equ	TWBR15	= 5 ; TWI Bit Rate register Bit 5
                                 .equ	TWBR16	= 6 ; TWI Bit Rate register Bit 6
                                 .equ	TWBR17	= 7 ; TWI Bit Rate register Bit 7
                                 
                                 ; TWCR1 - TWI Control Register
                                 .equ	TWIE1	= 0 ; TWI Interrupt Enable
                                 .equ	TWEN1	= 2 ; TWI Enable Bit
                                 .equ	TWWC1	= 3 ; TWI Write Collition Flag
                                 .equ	TWSTO1	= 4 ; TWI Stop Condition Bit
                                 .equ	TWSTA1	= 5 ; TWI Start Condition Bit
                                 .equ	TWEA1	= 6 ; TWI Enable Acknowledge Bit
                                 .equ	TWINT1	= 7 ; TWI Interrupt Flag
                                 
                                 ; TWSR1 - TWI Status Register
                                 .equ	TWPS10	= 0 ; TWI Prescaler
                                 .equ	TWPS11	= 1 ; TWI Prescaler
                                 .equ	TWS13	= 3 ; TWI Status
                                 .equ	TWS14	= 4 ; TWI Status
                                 .equ	TWS15	= 5 ; TWI Status
                                 .equ	TWS16	= 6 ; TWI Status
                                 .equ	TWS17	= 7 ; TWI Status
                                 
                                 ; TWDR1 - TWI Data register
                                 .equ	TWDR10	= 0 ; TWI Data register Bit 0
                                 .equ	TWDR11	= 1 ; TWI Data register Bit 1
                                 .equ	TWDR12	= 2 ; TWI Data register Bit 2
                                 .equ	TWDR13	= 3 ; TWI Data register Bit 3
                                 .equ	TWDR14	= 4 ; TWI Data register Bit 4
                                 .equ	TWDR15	= 5 ; TWI Data register Bit 5
                                 .equ	TWDR16	= 6 ; TWI Data register Bit 6
                                 .equ	TWDR17	= 7 ; TWI Data register Bit 7
                                 
                                 ; TWAR1 - TWI (Slave) Address register
                                 .equ	TWAR10	= 0 ; TWI (Slave) Address register Bit 0
                                 .equ	TWAR11	= 1 ; TWI (Slave) Address register Bit 1
                                 .equ	TWAR12	= 2 ; TWI (Slave) Address register Bit 2
                                 .equ	TWAR13	= 3 ; TWI (Slave) Address register Bit 3
                                 .equ	TWAR14	= 4 ; TWI (Slave) Address register Bit 4
                                 .equ	TWAR15	= 5 ; TWI (Slave) Address register Bit 5
                                 .equ	TWAR16	= 6 ; TWI (Slave) Address register Bit 6
                                 .equ	TWAR17	= 7 ; TWI (Slave) Address register Bit 7
                                 
                                 
                                 ; ***** TC1 *****************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0 ; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1 ; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2 ; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5 ; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0 ; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1 ; Output Compare Flag 1A
                                 .equ	OCF1B	= 2 ; Output Compare Flag 1B
                                 .equ	ICF1	= 5 ; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0 ; Waveform Generation Mode
                                 .equ	WGM11	= 1 ; Waveform Generation Mode
                                 .equ	COM1B0	= 4 ; Compare Output Mode 1B, bits
                                 .equ	COM1B1	= 5 ; Compare Output Mode 1B, bits
                                 .equ	COM1A0	= 6 ; Compare Output Mode 1A, bits
                                 .equ	COM1A1	= 7 ; Compare Output Mode 1A, bits
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0 ; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1 ; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2 ; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3 ; Waveform Generation Mode
                                 .equ	WGM13	= 4 ; Waveform Generation Mode
                                 .equ	ICES1	= 6 ; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7 ; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6 ; 
                                 .equ	FOC1A	= 7 ; 
                                 
                                 ; TCNT1 - Timer/Counter1 Bytes
                                 .equ	TCNT1H0	= 0 ; Timer/Counter1 Bytes High Bit 8
                                 .equ	TCNT1H1	= 1 ; Timer/Counter1 Bytes High Bit 9
                                 .equ	TCNT1H2	= 2 ; Timer/Counter1 Bytes High Bit 10
                                 .equ	TCNT1H3	= 3 ; Timer/Counter1 Bytes High Bit 11
                                 .equ	TCNT1H4	= 4 ; Timer/Counter1 Bytes High Bit 12
                                 .equ	TCNT1H5	= 5 ; Timer/Counter1 Bytes High Bit 13
                                 .equ	TCNT1H6	= 6 ; Timer/Counter1 Bytes High Bit 14
                                 .equ	TCNT1H7	= 7 ; Timer/Counter1 Bytes High Bit 15
                                 
                                 .equ	TCNT1L0	= 0 ; Timer/Counter1 Bytes Low Bit 0
                                 .equ	TCNT1L1	= 1 ; Timer/Counter1 Bytes Low Bit 1
                                 .equ	TCNT1L2	= 2 ; Timer/Counter1 Bytes Low Bit 2
                                 .equ	TCNT1L3	= 3 ; Timer/Counter1 Bytes Low Bit 3
                                 .equ	TCNT1L4	= 4 ; Timer/Counter1 Bytes Low Bit 4
                                 .equ	TCNT1L5	= 5 ; Timer/Counter1 Bytes Low Bit 5
                                 .equ	TCNT1L6	= 6 ; Timer/Counter1 Bytes Low Bit 6
                                 .equ	TCNT1L7	= 7 ; Timer/Counter1 Bytes Low Bit 7
                                 
                                 ; OCR1A - Timer/Counter1 Output Compare Register Bytes
                                 .equ	OCR1AH0	= 0 ; Timer/Counter1 Output Compare Register Bytes High Bit 8
                                 .equ	OCR1AH1	= 1 ; Timer/Counter1 Output Compare Register Bytes High Bit 9
                                 .equ	OCR1AH2	= 2 ; Timer/Counter1 Output Compare Register Bytes High Bit 10
                                 .equ	OCR1AH3	= 3 ; Timer/Counter1 Output Compare Register Bytes High Bit 11
                                 .equ	OCR1AH4	= 4 ; Timer/Counter1 Output Compare Register Bytes High Bit 12
                                 .equ	OCR1AH5	= 5 ; Timer/Counter1 Output Compare Register Bytes High Bit 13
                                 .equ	OCR1AH6	= 6 ; Timer/Counter1 Output Compare Register Bytes High Bit 14
                                 .equ	OCR1AH7	= 7 ; Timer/Counter1 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR1AL0	= 0 ; Timer/Counter1 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR1AL1	= 1 ; Timer/Counter1 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR1AL2	= 2 ; Timer/Counter1 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR1AL3	= 3 ; Timer/Counter1 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR1AL4	= 4 ; Timer/Counter1 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR1AL5	= 5 ; Timer/Counter1 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR1AL6	= 6 ; Timer/Counter1 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR1AL7	= 7 ; Timer/Counter1 Output Compare Register Bytes Low Bit 7
                                 
                                 ; OCR1B - Timer/Counter1 Output Compare Register Bytes
                                 .equ	OCR1BH0	= 0 ; Timer/Counter1 Output Compare Register Bytes High Bit 8
                                 .equ	OCR1BH1	= 1 ; Timer/Counter1 Output Compare Register Bytes High Bit 9
                                 .equ	OCR1BH2	= 2 ; Timer/Counter1 Output Compare Register Bytes High Bit 10
                                 .equ	OCR1BH3	= 3 ; Timer/Counter1 Output Compare Register Bytes High Bit 11
                                 .equ	OCR1BH4	= 4 ; Timer/Counter1 Output Compare Register Bytes High Bit 12
                                 .equ	OCR1BH5	= 5 ; Timer/Counter1 Output Compare Register Bytes High Bit 13
                                 .equ	OCR1BH6	= 6 ; Timer/Counter1 Output Compare Register Bytes High Bit 14
                                 .equ	OCR1BH7	= 7 ; Timer/Counter1 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR1BL0	= 0 ; Timer/Counter1 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR1BL1	= 1 ; Timer/Counter1 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR1BL2	= 2 ; Timer/Counter1 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR1BL3	= 3 ; Timer/Counter1 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR1BL4	= 4 ; Timer/Counter1 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR1BL5	= 5 ; Timer/Counter1 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR1BL6	= 6 ; Timer/Counter1 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR1BL7	= 7 ; Timer/Counter1 Output Compare Register Bytes Low Bit 7
                                 
                                 ; ICR1 - Timer/Counter1 Input Capture Register Bytes
                                 .equ	ICR1H0	= 0 ; Timer/Counter1 Input Capture Register Bytes High Bit 8
                                 .equ	ICR1H1	= 1 ; Timer/Counter1 Input Capture Register Bytes High Bit 9
                                 .equ	ICR1H2	= 2 ; Timer/Counter1 Input Capture Register Bytes High Bit 10
                                 .equ	ICR1H3	= 3 ; Timer/Counter1 Input Capture Register Bytes High Bit 11
                                 .equ	ICR1H4	= 4 ; Timer/Counter1 Input Capture Register Bytes High Bit 12
                                 .equ	ICR1H5	= 5 ; Timer/Counter1 Input Capture Register Bytes High Bit 13
                                 .equ	ICR1H6	= 6 ; Timer/Counter1 Input Capture Register Bytes High Bit 14
                                 .equ	ICR1H7	= 7 ; Timer/Counter1 Input Capture Register Bytes High Bit 15
                                 
                                 .equ	ICR1L0	= 0 ; Timer/Counter1 Input Capture Register Bytes Low Bit 0
                                 .equ	ICR1L1	= 1 ; Timer/Counter1 Input Capture Register Bytes Low Bit 1
                                 .equ	ICR1L2	= 2 ; Timer/Counter1 Input Capture Register Bytes Low Bit 2
                                 .equ	ICR1L3	= 3 ; Timer/Counter1 Input Capture Register Bytes Low Bit 3
                                 .equ	ICR1L4	= 4 ; Timer/Counter1 Input Capture Register Bytes Low Bit 4
                                 .equ	ICR1L5	= 5 ; Timer/Counter1 Input Capture Register Bytes Low Bit 5
                                 .equ	ICR1L6	= 6 ; Timer/Counter1 Input Capture Register Bytes Low Bit 6
                                 .equ	ICR1L7	= 7 ; Timer/Counter1 Input Capture Register Bytes Low Bit 7
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0 ; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7 ; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TC3 *****************
                                 ; TIMSK3 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE3	= 0 ; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1 ; Timer/Counter3 Output Compare Match A Interrupt Enable
                                 .equ	OCIE3B	= 2 ; Timer/Counter3 Output Compare Match B Interrupt Enable
                                 .equ	ICIE3	= 5 ; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0 ; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1 ; Output Compare Flag 3A
                                 .equ	OCF3B	= 2 ; Output Compare Flag 3B
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0 ; Waveform Genration Mode
                                 .equ	WGM31	= 1 ; Waveform Genration Mode
                                 .equ	COM3B0	= 4 ; Compare Output Mode bits
                                 .equ	COM3B1	= 5 ; Compare Output Mode bits
                                 .equ	COM3A0	= 6 ; Compare Output Mode bits
                                 .equ	COM3A1	= 7 ; Compare Output Mode bits
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0 ; Clock Select bits
                                 .equ	CS31	= 1 ; Clock Select bits
                                 .equ	CS32	= 2 ; Clock Select bits
                                 .equ	WGM32	= 3 ; Waveform Generation Mode bit 2
                                 .equ	WGM33	= 4 ; Waveform Generation Mode bit 3
                                 .equ	ICES3	= 6 ; Input Capture Edge Select
                                 .equ	ICNC3	= 7 ; Input Capture Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3B	= 6 ; Force Output Compare for Channel B
                                 .equ	FOC3A	= 7 ; Force Output Compare for Channel A
                                 
                                 ; TCNT3 - Timer/Counter3 Bytes
                                 .equ	TCNT3H0	= 0 ; Timer/Counter3 Bytes High Bit 8
                                 .equ	TCNT3H1	= 1 ; Timer/Counter3 Bytes High Bit 9
                                 .equ	TCNT3H2	= 2 ; Timer/Counter3 Bytes High Bit 10
                                 .equ	TCNT3H3	= 3 ; Timer/Counter3 Bytes High Bit 11
                                 .equ	TCNT3H4	= 4 ; Timer/Counter3 Bytes High Bit 12
                                 .equ	TCNT3H5	= 5 ; Timer/Counter3 Bytes High Bit 13
                                 .equ	TCNT3H6	= 6 ; Timer/Counter3 Bytes High Bit 14
                                 .equ	TCNT3H7	= 7 ; Timer/Counter3 Bytes High Bit 15
                                 
                                 .equ	TCNT3L0	= 0 ; Timer/Counter3 Bytes Low Bit 0
                                 .equ	TCNT3L1	= 1 ; Timer/Counter3 Bytes Low Bit 1
                                 .equ	TCNT3L2	= 2 ; Timer/Counter3 Bytes Low Bit 2
                                 .equ	TCNT3L3	= 3 ; Timer/Counter3 Bytes Low Bit 3
                                 .equ	TCNT3L4	= 4 ; Timer/Counter3 Bytes Low Bit 4
                                 .equ	TCNT3L5	= 5 ; Timer/Counter3 Bytes Low Bit 5
                                 .equ	TCNT3L6	= 6 ; Timer/Counter3 Bytes Low Bit 6
                                 .equ	TCNT3L7	= 7 ; Timer/Counter3 Bytes Low Bit 7
                                 
                                 ; OCR3A - Timer/Counter3 Output Compare Register Bytes
                                 .equ	OCR3AH0	= 0 ; Timer/Counter3 Output Compare Register Bytes High Bit 8
                                 .equ	OCR3AH1	= 1 ; Timer/Counter3 Output Compare Register Bytes High Bit 9
                                 .equ	OCR3AH2	= 2 ; Timer/Counter3 Output Compare Register Bytes High Bit 10
                                 .equ	OCR3AH3	= 3 ; Timer/Counter3 Output Compare Register Bytes High Bit 11
                                 .equ	OCR3AH4	= 4 ; Timer/Counter3 Output Compare Register Bytes High Bit 12
                                 .equ	OCR3AH5	= 5 ; Timer/Counter3 Output Compare Register Bytes High Bit 13
                                 .equ	OCR3AH6	= 6 ; Timer/Counter3 Output Compare Register Bytes High Bit 14
                                 .equ	OCR3AH7	= 7 ; Timer/Counter3 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR3AL0	= 0 ; Timer/Counter3 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR3AL1	= 1 ; Timer/Counter3 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR3AL2	= 2 ; Timer/Counter3 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR3AL3	= 3 ; Timer/Counter3 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR3AL4	= 4 ; Timer/Counter3 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR3AL5	= 5 ; Timer/Counter3 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR3AL6	= 6 ; Timer/Counter3 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR3AL7	= 7 ; Timer/Counter3 Output Compare Register Bytes Low Bit 7
                                 
                                 ; OCR3B - Timer/Counter3 Output Compare Register Bytes
                                 .equ	OCR3BH0	= 0 ; Timer/Counter3 Output Compare Register Bytes High Bit 8
                                 .equ	OCR3BH1	= 1 ; Timer/Counter3 Output Compare Register Bytes High Bit 9
                                 .equ	OCR3BH2	= 2 ; Timer/Counter3 Output Compare Register Bytes High Bit 10
                                 .equ	OCR3BH3	= 3 ; Timer/Counter3 Output Compare Register Bytes High Bit 11
                                 .equ	OCR3BH4	= 4 ; Timer/Counter3 Output Compare Register Bytes High Bit 12
                                 .equ	OCR3BH5	= 5 ; Timer/Counter3 Output Compare Register Bytes High Bit 13
                                 .equ	OCR3BH6	= 6 ; Timer/Counter3 Output Compare Register Bytes High Bit 14
                                 .equ	OCR3BH7	= 7 ; Timer/Counter3 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR3BL0	= 0 ; Timer/Counter3 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR3BL1	= 1 ; Timer/Counter3 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR3BL2	= 2 ; Timer/Counter3 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR3BL3	= 3 ; Timer/Counter3 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR3BL4	= 4 ; Timer/Counter3 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR3BL5	= 5 ; Timer/Counter3 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR3BL6	= 6 ; Timer/Counter3 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR3BL7	= 7 ; Timer/Counter3 Output Compare Register Bytes Low Bit 7
                                 
                                 ; ICR3 - Timer/Counter3 Input Capture Register Bytes
                                 .equ	ICR3H0	= 0 ; Timer/Counter3 Input Capture Register Bytes High Bit 8
                                 .equ	ICR3H1	= 1 ; Timer/Counter3 Input Capture Register Bytes High Bit 9
                                 .equ	ICR3H2	= 2 ; Timer/Counter3 Input Capture Register Bytes High Bit 10
                                 .equ	ICR3H3	= 3 ; Timer/Counter3 Input Capture Register Bytes High Bit 11
                                 .equ	ICR3H4	= 4 ; Timer/Counter3 Input Capture Register Bytes High Bit 12
                                 .equ	ICR3H5	= 5 ; Timer/Counter3 Input Capture Register Bytes High Bit 13
                                 .equ	ICR3H6	= 6 ; Timer/Counter3 Input Capture Register Bytes High Bit 14
                                 .equ	ICR3H7	= 7 ; Timer/Counter3 Input Capture Register Bytes High Bit 15
                                 
                                 .equ	ICR3L0	= 0 ; Timer/Counter3 Input Capture Register Bytes Low Bit 0
                                 .equ	ICR3L1	= 1 ; Timer/Counter3 Input Capture Register Bytes Low Bit 1
                                 .equ	ICR3L2	= 2 ; Timer/Counter3 Input Capture Register Bytes Low Bit 2
                                 .equ	ICR3L3	= 3 ; Timer/Counter3 Input Capture Register Bytes Low Bit 3
                                 .equ	ICR3L4	= 4 ; Timer/Counter3 Input Capture Register Bytes Low Bit 4
                                 .equ	ICR3L5	= 5 ; Timer/Counter3 Input Capture Register Bytes Low Bit 5
                                 .equ	ICR3L6	= 6 ; Timer/Counter3 Input Capture Register Bytes Low Bit 6
                                 .equ	ICR3L7	= 7 ; Timer/Counter3 Input Capture Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** TC4 *****************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0 ; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1 ; Timer/Counter4 Output Compare Match A Interrupt Enable
                                 .equ	OCIE4B	= 2 ; Timer/Counter4 Output Compare Match B Interrupt Enable
                                 .equ	ICIE4	= 5 ; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0 ; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1 ; Output Compare Flag 4A
                                 .equ	OCF4B	= 2 ; Output Compare Flag 4B
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0 ; Waveform Genration Mode
                                 .equ	WGM41	= 1 ; Waveform Genration Mode
                                 .equ	COM4B0	= 4 ; Compare Output Mode bits
                                 .equ	COM4B1	= 5 ; Compare Output Mode bits
                                 .equ	COM4A0	= 6 ; Compare Output Mode bits
                                 .equ	COM4A1	= 7 ; Compare Output Mode bits
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0 ; Clock Select bits
                                 .equ	CS41	= 1 ; Clock Select bits
                                 .equ	CS42	= 2 ; Clock Select bits
                                 .equ	WGM42	= 3 ; Waveform Generation Mode bit 2
                                 .equ	WGM43	= 4 ; Waveform Generation Mode bit 3
                                 .equ	ICES4	= 6 ; Input Capture Edge Select
                                 .equ	ICNC4	= 7 ; Input Capture Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter4 Control Register C
                                 .equ	FOC4B	= 6 ; Force Output Compare for Channel B
                                 .equ	FOC4A	= 7 ; Force Output Compare for Channel A
                                 
                                 ; TCNT4 - Timer/Counter4 Bytes
                                 .equ	TCNT4H0	= 0 ; Timer/Counter4 Bytes High Bit 8
                                 .equ	TCNT4H1	= 1 ; Timer/Counter4 Bytes High Bit 9
                                 .equ	TCNT4H2	= 2 ; Timer/Counter4 Bytes High Bit 10
                                 .equ	TCNT4H3	= 3 ; Timer/Counter4 Bytes High Bit 11
                                 .equ	TCNT4H4	= 4 ; Timer/Counter4 Bytes High Bit 12
                                 .equ	TCNT4H5	= 5 ; Timer/Counter4 Bytes High Bit 13
                                 .equ	TCNT4H6	= 6 ; Timer/Counter4 Bytes High Bit 14
                                 .equ	TCNT4H7	= 7 ; Timer/Counter4 Bytes High Bit 15
                                 
                                 .equ	TCNT4L0	= 0 ; Timer/Counter4 Bytes Low Bit 0
                                 .equ	TCNT4L1	= 1 ; Timer/Counter4 Bytes Low Bit 1
                                 .equ	TCNT4L2	= 2 ; Timer/Counter4 Bytes Low Bit 2
                                 .equ	TCNT4L3	= 3 ; Timer/Counter4 Bytes Low Bit 3
                                 .equ	TCNT4L4	= 4 ; Timer/Counter4 Bytes Low Bit 4
                                 .equ	TCNT4L5	= 5 ; Timer/Counter4 Bytes Low Bit 5
                                 .equ	TCNT4L6	= 6 ; Timer/Counter4 Bytes Low Bit 6
                                 .equ	TCNT4L7	= 7 ; Timer/Counter4 Bytes Low Bit 7
                                 
                                 ; OCR4A - Timer/Counter4 Output Compare Register Bytes
                                 .equ	OCR4AH0	= 0 ; Timer/Counter4 Output Compare Register Bytes High Bit 8
                                 .equ	OCR4AH1	= 1 ; Timer/Counter4 Output Compare Register Bytes High Bit 9
                                 .equ	OCR4AH2	= 2 ; Timer/Counter4 Output Compare Register Bytes High Bit 10
                                 .equ	OCR4AH3	= 3 ; Timer/Counter4 Output Compare Register Bytes High Bit 11
                                 .equ	OCR4AH4	= 4 ; Timer/Counter4 Output Compare Register Bytes High Bit 12
                                 .equ	OCR4AH5	= 5 ; Timer/Counter4 Output Compare Register Bytes High Bit 13
                                 .equ	OCR4AH6	= 6 ; Timer/Counter4 Output Compare Register Bytes High Bit 14
                                 .equ	OCR4AH7	= 7 ; Timer/Counter4 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR4AL0	= 0 ; Timer/Counter4 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR4AL1	= 1 ; Timer/Counter4 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR4AL2	= 2 ; Timer/Counter4 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR4AL3	= 3 ; Timer/Counter4 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR4AL4	= 4 ; Timer/Counter4 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR4AL5	= 5 ; Timer/Counter4 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR4AL6	= 6 ; Timer/Counter4 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR4AL7	= 7 ; Timer/Counter4 Output Compare Register Bytes Low Bit 7
                                 
                                 ; OCR4B - Timer/Counter4 Output Compare Register Bytes
                                 .equ	OCR4BH0	= 0 ; Timer/Counter4 Output Compare Register Bytes High Bit 8
                                 .equ	OCR4BH1	= 1 ; Timer/Counter4 Output Compare Register Bytes High Bit 9
                                 .equ	OCR4BH2	= 2 ; Timer/Counter4 Output Compare Register Bytes High Bit 10
                                 .equ	OCR4BH3	= 3 ; Timer/Counter4 Output Compare Register Bytes High Bit 11
                                 .equ	OCR4BH4	= 4 ; Timer/Counter4 Output Compare Register Bytes High Bit 12
                                 .equ	OCR4BH5	= 5 ; Timer/Counter4 Output Compare Register Bytes High Bit 13
                                 .equ	OCR4BH6	= 6 ; Timer/Counter4 Output Compare Register Bytes High Bit 14
                                 .equ	OCR4BH7	= 7 ; Timer/Counter4 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR4BL0	= 0 ; Timer/Counter4 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR4BL1	= 1 ; Timer/Counter4 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR4BL2	= 2 ; Timer/Counter4 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR4BL3	= 3 ; Timer/Counter4 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR4BL4	= 4 ; Timer/Counter4 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR4BL5	= 5 ; Timer/Counter4 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR4BL6	= 6 ; Timer/Counter4 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR4BL7	= 7 ; Timer/Counter4 Output Compare Register Bytes Low Bit 7
                                 
                                 ; ICR4 - Timer/Counter4 Input Capture Register Bytes
                                 .equ	ICR4H0	= 0 ; Timer/Counter4 Input Capture Register Bytes High Bit 8
                                 .equ	ICR4H1	= 1 ; Timer/Counter4 Input Capture Register Bytes High Bit 9
                                 .equ	ICR4H2	= 2 ; Timer/Counter4 Input Capture Register Bytes High Bit 10
                                 .equ	ICR4H3	= 3 ; Timer/Counter4 Input Capture Register Bytes High Bit 11
                                 .equ	ICR4H4	= 4 ; Timer/Counter4 Input Capture Register Bytes High Bit 12
                                 .equ	ICR4H5	= 5 ; Timer/Counter4 Input Capture Register Bytes High Bit 13
                                 .equ	ICR4H6	= 6 ; Timer/Counter4 Input Capture Register Bytes High Bit 14
                                 .equ	ICR4H7	= 7 ; Timer/Counter4 Input Capture Register Bytes High Bit 15
                                 
                                 .equ	ICR4L0	= 0 ; Timer/Counter4 Input Capture Register Bytes Low Bit 0
                                 .equ	ICR4L1	= 1 ; Timer/Counter4 Input Capture Register Bytes Low Bit 1
                                 .equ	ICR4L2	= 2 ; Timer/Counter4 Input Capture Register Bytes Low Bit 2
                                 .equ	ICR4L3	= 3 ; Timer/Counter4 Input Capture Register Bytes Low Bit 3
                                 .equ	ICR4L4	= 4 ; Timer/Counter4 Input Capture Register Bytes Low Bit 4
                                 .equ	ICR4L5	= 5 ; Timer/Counter4 Input Capture Register Bytes Low Bit 5
                                 .equ	ICR4L6	= 6 ; Timer/Counter4 Input Capture Register Bytes Low Bit 6
                                 .equ	ICR4L7	= 7 ; Timer/Counter4 Input Capture Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** TC2 *****************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0 ; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2A	= 1 ; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2 ; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0 ; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1 ; Output Compare Flag 2A
                                 .equ	OCF2B	= 2 ; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0 ; Waveform Genration Mode
                                 .equ	WGM21	= 1 ; Waveform Genration Mode
                                 .equ	COM2B0	= 4 ; Compare Output Mode bits
                                 .equ	COM2B1	= 5 ; Compare Output Mode bits
                                 .equ	COM2A0	= 6 ; Compare Output Mode bits
                                 .equ	COM2A1	= 7 ; Compare Output Mode bits
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0 ; Clock Select bits
                                 .equ	CS21	= 1 ; Clock Select bits
                                 .equ	CS22	= 2 ; Clock Select bits
                                 .equ	WGM22	= 3 ; Waveform Generation Mode
                                 .equ	FOC2B	= 6 ; Force Output Compare B
                                 .equ	FOC2A	= 7 ; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT20	= 0 ; Timer/Counter2 Bit 0
                                 .equ	TCNT21	= 1 ; Timer/Counter2 Bit 1
                                 .equ	TCNT22	= 2 ; Timer/Counter2 Bit 2
                                 .equ	TCNT23	= 3 ; Timer/Counter2 Bit 3
                                 .equ	TCNT24	= 4 ; Timer/Counter2 Bit 4
                                 .equ	TCNT25	= 5 ; Timer/Counter2 Bit 5
                                 .equ	TCNT26	= 6 ; Timer/Counter2 Bit 6
                                 .equ	TCNT27	= 7 ; Timer/Counter2 Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B0	= 0 ; Timer/Counter2 Output Compare Register B Bit 0
                                 .equ	OCR2B1	= 1 ; Timer/Counter2 Output Compare Register B Bit 1
                                 .equ	OCR2B2	= 2 ; Timer/Counter2 Output Compare Register B Bit 2
                                 .equ	OCR2B3	= 3 ; Timer/Counter2 Output Compare Register B Bit 3
                                 .equ	OCR2B4	= 4 ; Timer/Counter2 Output Compare Register B Bit 4
                                 .equ	OCR2B5	= 5 ; Timer/Counter2 Output Compare Register B Bit 5
                                 .equ	OCR2B6	= 6 ; Timer/Counter2 Output Compare Register B Bit 6
                                 .equ	OCR2B7	= 7 ; Timer/Counter2 Output Compare Register B Bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A0	= 0 ; Timer/Counter2 Output Compare Register A Bit 0
                                 .equ	OCR2A1	= 1 ; Timer/Counter2 Output Compare Register A Bit 1
                                 .equ	OCR2A2	= 2 ; Timer/Counter2 Output Compare Register A Bit 2
                                 .equ	OCR2A3	= 3 ; Timer/Counter2 Output Compare Register A Bit 3
                                 .equ	OCR2A4	= 4 ; Timer/Counter2 Output Compare Register A Bit 4
                                 .equ	OCR2A5	= 5 ; Timer/Counter2 Output Compare Register A Bit 5
                                 .equ	OCR2A6	= 6 ; Timer/Counter2 Output Compare Register A Bit 6
                                 .equ	OCR2A7	= 7 ; Timer/Counter2 Output Compare Register A Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0 ; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1 ; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2 ; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3 ; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4 ; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5 ; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6 ; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1 ; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** ADC *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0 ; Analog Channel Selection Bits
                                 .equ	MUX1	= 1 ; Analog Channel Selection Bits
                                 .equ	MUX2	= 2 ; Analog Channel Selection Bits
                                 .equ	MUX3	= 3 ; Analog Channel Selection Bits
                                 .equ	ADLAR	= 5 ; Left Adjust Result
                                 .equ	REFS0	= 6 ; Reference Selection Bits
                                 .equ	REFS1	= 7 ; Reference Selection Bits
                                 
                                 ; ADC - ADC Data Register Bytes
                                 .equ	ADCH0	= 0 ; ADC Data Register Bytes High Bit 8
                                 .equ	ADCH1	= 1 ; ADC Data Register Bytes High Bit 9
                                 .equ	ADCH2	= 2 ; ADC Data Register Bytes High Bit 10
                                 .equ	ADCH3	= 3 ; ADC Data Register Bytes High Bit 11
                                 .equ	ADCH4	= 4 ; ADC Data Register Bytes High Bit 12
                                 .equ	ADCH5	= 5 ; ADC Data Register Bytes High Bit 13
                                 .equ	ADCH6	= 6 ; ADC Data Register Bytes High Bit 14
                                 .equ	ADCH7	= 7 ; ADC Data Register Bytes High Bit 15
                                 
                                 .equ	ADCL0	= 0 ; ADC Data Register Bytes Low Bit 0
                                 .equ	ADCL1	= 1 ; ADC Data Register Bytes Low Bit 1
                                 .equ	ADCL2	= 2 ; ADC Data Register Bytes Low Bit 2
                                 .equ	ADCL3	= 3 ; ADC Data Register Bytes Low Bit 3
                                 .equ	ADCL4	= 4 ; ADC Data Register Bytes Low Bit 4
                                 .equ	ADCL5	= 5 ; ADC Data Register Bytes Low Bit 5
                                 .equ	ADCL6	= 6 ; ADC Data Register Bytes Low Bit 6
                                 .equ	ADCL7	= 7 ; ADC Data Register Bytes Low Bit 7
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0 ; ADC Prescaler Select Bits
                                 .equ	ADPS1	= 1 ; ADC Prescaler Select Bits
                                 .equ	ADPS2	= 2 ; ADC Prescaler Select Bits
                                 .equ	ADIE	= 3 ; ADC Interrupt Enable
                                 .equ	ADIF	= 4 ; ADC Interrupt Flag
                                 .equ	ADATE	= 5 ; ADC Auto Trigger Enable
                                 .equ	ADSC	= 6 ; ADC Start Conversion
                                 .equ	ADEN	= 7 ; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0 ; ADC Auto Trigger Source bits
                                 .equ	ADTS1	= 1 ; ADC Auto Trigger Source bits
                                 .equ	ADTS2	= 2 ; ADC Auto Trigger Source bits
                                 .equ	ACME	= 6 ; 
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0 ; 
                                 .equ	ADC1D	= 1 ; 
                                 .equ	ADC2D	= 2 ; 
                                 .equ	ADC3D	= 3 ; 
                                 .equ	ADC4D	= 4 ; 
                                 .equ	ADC5D	= 5 ; 
                                 
                                 
                                 ; ***** AC *****************
                                 ; ACSRA - Analog Comparator Control And Status Register-A
                                 .equ	ACSRA0	= 0 ; Analog Comparator Control And Status Register-A Bit 0
                                 .equ	ACSRA1	= 1 ; Analog Comparator Control And Status Register-A Bit 1
                                 .equ	ACSRA2	= 2 ; Analog Comparator Control And Status Register-A Bit 2
                                 .equ	ACSRA3	= 3 ; Analog Comparator Control And Status Register-A Bit 3
                                 .equ	ACSRA4	= 4 ; Analog Comparator Control And Status Register-A Bit 4
                                 .equ	ACSRA5	= 5 ; Analog Comparator Control And Status Register-A Bit 5
                                 .equ	ACSRA6	= 6 ; Analog Comparator Control And Status Register-A Bit 6
                                 .equ	ACSRA7	= 7 ; Analog Comparator Control And Status Register-A Bit 7
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0 ; Analog Comparator Interrupt Mode Select bits
                                 .equ	ACIS1	= 1 ; Analog Comparator Interrupt Mode Select bits
                                 .equ	ACIC	= 2 ; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3 ; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4 ; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5 ; Analog Compare Output
                                 .equ	ACBG	= 6 ; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7 ; Analog Comparator Disable
                                 
                                 ; ACSRB - Analog Comparator Control And Status Register-B
                                 .equ	ACOE	= 0 ; Analog Comparator Output Enable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0 ; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1 ; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB *****************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0 ; Port B Data Register Bit 0
                                 .equ	PORTB1	= 1 ; Port B Data Register Bit 1
                                 .equ	PORTB2	= 2 ; Port B Data Register Bit 2
                                 .equ	PORTB3	= 3 ; Port B Data Register Bit 3
                                 .equ	PORTB4	= 4 ; Port B Data Register Bit 4
                                 .equ	PORTB5	= 5 ; Port B Data Register Bit 5
                                 .equ	PORTB6	= 6 ; Port B Data Register Bit 6
                                 .equ	PORTB7	= 7 ; Port B Data Register Bit 7
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDRB0	= 0 ; Port B Data Direction Register Bit 0
                                 .equ	DDRB1	= 1 ; Port B Data Direction Register Bit 1
                                 .equ	DDRB2	= 2 ; Port B Data Direction Register Bit 2
                                 .equ	DDRB3	= 3 ; Port B Data Direction Register Bit 3
                                 .equ	DDRB4	= 4 ; Port B Data Direction Register Bit 4
                                 .equ	DDRB5	= 5 ; Port B Data Direction Register Bit 5
                                 .equ	DDRB6	= 6 ; Port B Data Direction Register Bit 6
                                 .equ	DDRB7	= 7 ; Port B Data Direction Register Bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0 ; Port B Input Pins Bit 0
                                 .equ	PINB1	= 1 ; Port B Input Pins Bit 1
                                 .equ	PINB2	= 2 ; Port B Input Pins Bit 2
                                 .equ	PINB3	= 3 ; Port B Input Pins Bit 3
                                 .equ	PINB4	= 4 ; Port B Input Pins Bit 4
                                 .equ	PINB5	= 5 ; Port B Input Pins Bit 5
                                 .equ	PINB6	= 6 ; Port B Input Pins Bit 6
                                 .equ	PINB7	= 7 ; Port B Input Pins Bit 7
                                 
                                 
                                 ; ***** PORTC *****************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0 ; Port C Data Register Bit 0
                                 .equ	PORTC1	= 1 ; Port C Data Register Bit 1
                                 .equ	PORTC2	= 2 ; Port C Data Register Bit 2
                                 .equ	PORTC3	= 3 ; Port C Data Register Bit 3
                                 .equ	PORTC4	= 4 ; Port C Data Register Bit 4
                                 .equ	PORTC5	= 5 ; Port C Data Register Bit 5
                                 .equ	PORTC6	= 6 ; Port C Data Register Bit 6
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDRC0	= 0 ; Port C Data Direction Register Bit 0
                                 .equ	DDRC1	= 1 ; Port C Data Direction Register Bit 1
                                 .equ	DDRC2	= 2 ; Port C Data Direction Register Bit 2
                                 .equ	DDRC3	= 3 ; Port C Data Direction Register Bit 3
                                 .equ	DDRC4	= 4 ; Port C Data Direction Register Bit 4
                                 .equ	DDRC5	= 5 ; Port C Data Direction Register Bit 5
                                 .equ	DDRC6	= 6 ; Port C Data Direction Register Bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0 ; Port C Input Pins Bit 0
                                 .equ	PINC1	= 1 ; Port C Input Pins Bit 1
                                 .equ	PINC2	= 2 ; Port C Input Pins Bit 2
                                 .equ	PINC3	= 3 ; Port C Input Pins Bit 3
                                 .equ	PINC4	= 4 ; Port C Input Pins Bit 4
                                 .equ	PINC5	= 5 ; Port C Input Pins Bit 5
                                 .equ	PINC6	= 6 ; Port C Input Pins Bit 6
                                 
                                 
                                 ; ***** PORTD *****************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0 ; Port D Data Register Bit 0
                                 .equ	PORTD1	= 1 ; Port D Data Register Bit 1
                                 .equ	PORTD2	= 2 ; Port D Data Register Bit 2
                                 .equ	PORTD3	= 3 ; Port D Data Register Bit 3
                                 .equ	PORTD4	= 4 ; Port D Data Register Bit 4
                                 .equ	PORTD5	= 5 ; Port D Data Register Bit 5
                                 .equ	PORTD6	= 6 ; Port D Data Register Bit 6
                                 .equ	PORTD7	= 7 ; Port D Data Register Bit 7
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDRD0	= 0 ; Port D Data Direction Register Bit 0
                                 .equ	DDRD1	= 1 ; Port D Data Direction Register Bit 1
                                 .equ	DDRD2	= 2 ; Port D Data Direction Register Bit 2
                                 .equ	DDRD3	= 3 ; Port D Data Direction Register Bit 3
                                 .equ	DDRD4	= 4 ; Port D Data Direction Register Bit 4
                                 .equ	DDRD5	= 5 ; Port D Data Direction Register Bit 5
                                 .equ	DDRD6	= 6 ; Port D Data Direction Register Bit 6
                                 .equ	DDRD7	= 7 ; Port D Data Direction Register Bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0 ; Port D Input Pins Bit 0
                                 .equ	PIND1	= 1 ; Port D Input Pins Bit 1
                                 .equ	PIND2	= 2 ; Port D Input Pins Bit 2
                                 .equ	PIND3	= 3 ; Port D Input Pins Bit 3
                                 .equ	PIND4	= 4 ; Port D Input Pins Bit 4
                                 .equ	PIND5	= 5 ; Port D Input Pins Bit 5
                                 .equ	PIND6	= 6 ; Port D Input Pins Bit 6
                                 .equ	PIND7	= 7 ; Port D Input Pins Bit 7
                                 
                                 
                                 ; ***** PORTE *****************
                                 ; PORTE - Port E Data Register
                                 .equ	PORTE0	= 0 ; Port E Data Register Bit 0
                                 .equ	PORTE1	= 1 ; Port E Data Register Bit 1
                                 .equ	PORTE2	= 2 ; Port E Data Register Bit 2
                                 .equ	PORTE3	= 3 ; Port E Data Register Bit 3
                                 
                                 ; DDRE - Port E Data Direction Register
                                 .equ	DDRE0	= 0 ; Port E Data Direction Register Bit 0
                                 .equ	DDRE1	= 1 ; Port E Data Direction Register Bit 1
                                 .equ	DDRE2	= 2 ; Port E Data Direction Register Bit 2
                                 .equ	DDRE3	= 3 ; Port E Data Direction Register Bit 3
                                 
                                 ; PINE - Port E Input Pins
                                 .equ	PINE0	= 0 ; Port E Input Pins Bit 0
                                 .equ	PINE1	= 1 ; Port E Input Pins Bit 1
                                 .equ	PINE2	= 2 ; Port E Input Pins Bit 2
                                 .equ	PINE3	= 3 ; Port E Input Pins Bit 3
                                 
                                 
                                 ; ***** TC0 *****************
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B0	= 0 ; Timer/Counter0 Output Compare Register Bit 0
                                 .equ	OCR0B1	= 1 ; Timer/Counter0 Output Compare Register Bit 1
                                 .equ	OCR0B2	= 2 ; Timer/Counter0 Output Compare Register Bit 2
                                 .equ	OCR0B3	= 3 ; Timer/Counter0 Output Compare Register Bit 3
                                 .equ	OCR0B4	= 4 ; Timer/Counter0 Output Compare Register Bit 4
                                 .equ	OCR0B5	= 5 ; Timer/Counter0 Output Compare Register Bit 5
                                 .equ	OCR0B6	= 6 ; Timer/Counter0 Output Compare Register Bit 6
                                 .equ	OCR0B7	= 7 ; Timer/Counter0 Output Compare Register Bit 7
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A0	= 0 ; Timer/Counter0 Output Compare Register Bit 0
                                 .equ	OCR0A1	= 1 ; Timer/Counter0 Output Compare Register Bit 1
                                 .equ	OCR0A2	= 2 ; Timer/Counter0 Output Compare Register Bit 2
                                 .equ	OCR0A3	= 3 ; Timer/Counter0 Output Compare Register Bit 3
                                 .equ	OCR0A4	= 4 ; Timer/Counter0 Output Compare Register Bit 4
                                 .equ	OCR0A5	= 5 ; Timer/Counter0 Output Compare Register Bit 5
                                 .equ	OCR0A6	= 6 ; Timer/Counter0 Output Compare Register Bit 6
                                 .equ	OCR0A7	= 7 ; Timer/Counter0 Output Compare Register Bit 7
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT00	= 0 ; Timer/Counter0 Bit 0
                                 .equ	TCNT01	= 1 ; Timer/Counter0 Bit 1
                                 .equ	TCNT02	= 2 ; Timer/Counter0 Bit 2
                                 .equ	TCNT03	= 3 ; Timer/Counter0 Bit 3
                                 .equ	TCNT04	= 4 ; Timer/Counter0 Bit 4
                                 .equ	TCNT05	= 5 ; Timer/Counter0 Bit 5
                                 .equ	TCNT06	= 6 ; Timer/Counter0 Bit 6
                                 .equ	TCNT07	= 7 ; Timer/Counter0 Bit 7
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0 ; Clock Select
                                 .equ	CS01	= 1 ; Clock Select
                                 .equ	CS02	= 2 ; Clock Select
                                 .equ	WGM02	= 3 ; 
                                 .equ	FOC0B	= 6 ; Force Output Compare B
                                 .equ	FOC0A	= 7 ; Force Output Compare A
                                 
                                 ; TCCR0A - Timer/Counter Control Register A
                                 .equ	WGM00	= 0 ; Waveform Generation Mode
                                 .equ	WGM01	= 1 ; Waveform Generation Mode
                                 .equ	COM0B0	= 4 ; Compare Output Mode, Fast PWM
                                 .equ	COM0B1	= 5 ; Compare Output Mode, Fast PWM
                                 .equ	COM0A0	= 6 ; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7 ; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0 ; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1 ; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2 ; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0 ; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1 ; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2 ; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 
                                 
                                 ; ***** EXINT *****************
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0 ; External Interrupt Sense Control 0 Bits
                                 .equ	ISC01	= 1 ; External Interrupt Sense Control 0 Bits
                                 .equ	ISC10	= 2 ; External Interrupt Sense Control 1 Bits
                                 .equ	ISC11	= 3 ; External Interrupt Sense Control 1 Bits
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0 ; External Interrupt Request 1 Enable
                                 .equ	INT1	= 1 ; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0 ; External Interrupt Flags
                                 .equ	INTF1	= 1 ; External Interrupt Flags
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0 ; Pin Change Interrupt Enables
                                 .equ	PCIE1	= 1 ; Pin Change Interrupt Enables
                                 .equ	PCIE2	= 2 ; Pin Change Interrupt Enables
                                 .equ	PCIE3	= 3 ; Pin Change Interrupt Enables
                                 
                                 ; PCMSK3 - Pin Change Mask Register 3
                                 .equ	PCINT24	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT25	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT26	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT27	= 3 ; Pin Change Enable Masks
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT17	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT18	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT19	= 3 ; Pin Change Enable Masks
                                 .equ	PCINT20	= 4 ; Pin Change Enable Masks
                                 .equ	PCINT21	= 5 ; Pin Change Enable Masks
                                 .equ	PCINT22	= 6 ; Pin Change Enable Masks
                                 .equ	PCINT23	= 7 ; Pin Change Enable Masks
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT9	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT10	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT11	= 3 ; Pin Change Enable Masks
                                 .equ	PCINT12	= 4 ; Pin Change Enable Masks
                                 .equ	PCINT13	= 5 ; Pin Change Enable Masks
                                 .equ	PCINT14	= 6 ; Pin Change Enable Masks
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT1	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT2	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT3	= 3 ; Pin Change Enable Masks
                                 .equ	PCINT4	= 4 ; Pin Change Enable Masks
                                 .equ	PCINT5	= 5 ; Pin Change Enable Masks
                                 .equ	PCINT6	= 6 ; Pin Change Enable Masks
                                 .equ	PCINT7	= 7 ; Pin Change Enable Masks
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0 ; Pin Change Interrupt Flags
                                 .equ	PCIF1	= 1 ; Pin Change Interrupt Flags
                                 .equ	PCIF2	= 2 ; Pin Change Interrupt Flags
                                 .equ	PCIF3	= 3 ; Pin Change Interrupt Flags
                                 
                                 
                                 ; ***** SPI0 *****************
                                 ; SPDR0 - SPI Data Register
                                 .equ	SPDR00	= 0 ; SPI Data Register Bit 0
                                 .equ	SPDR01	= 1 ; SPI Data Register Bit 1
                                 .equ	SPDR02	= 2 ; SPI Data Register Bit 2
                                 .equ	SPDR03	= 3 ; SPI Data Register Bit 3
                                 .equ	SPDR04	= 4 ; SPI Data Register Bit 4
                                 .equ	SPDR05	= 5 ; SPI Data Register Bit 5
                                 .equ	SPDR06	= 6 ; SPI Data Register Bit 6
                                 .equ	SPDR07	= 7 ; SPI Data Register Bit 7
                                 
                                 ; SPSR0 - SPI Status Register
                                 .equ	SPI2X	= 0 ; Double SPI Speed Bit
                                 .equ	WCOL	= 6 ; Write Collision Flag
                                 .equ	SPIF	= 7 ; SPI Interrupt Flag
                                 
                                 ; SPCR0 - SPI Control Register
                                 .equ	SPR0	= 0 ; SPI Clock Rate Selects
                                 .equ	SPR1	= 1 ; SPI Clock Rate Selects
                                 .equ	CPHA	= 2 ; Clock Phase
                                 .equ	CPOL	= 3 ; Clock polarity
                                 .equ	MSTR	= 4 ; Master/Slave Select
                                 .equ	DORD	= 5 ; Data Order
                                 .equ	SPE	= 6 ; SPI Enable
                                 .equ	SPIE	= 7 ; SPI Interrupt Enable
                                 
                                 
                                 ; ***** SPI1 *****************
                                 ; SPDR1 - SPI Data Register
                                 .equ	SPDR10	= 0 ; SPI Data Register Bit 0
                                 .equ	SPDR11	= 1 ; SPI Data Register Bit 1
                                 .equ	SPDR12	= 2 ; SPI Data Register Bit 2
                                 .equ	SPDR13	= 3 ; SPI Data Register Bit 3
                                 .equ	SPDR14	= 4 ; SPI Data Register Bit 4
                                 .equ	SPDR15	= 5 ; SPI Data Register Bit 5
                                 .equ	SPDR16	= 6 ; SPI Data Register Bit 6
                                 .equ	SPDR17	= 7 ; SPI Data Register Bit 7
                                 
                                 ; SPSR1 - SPI Status Register
                                 .equ	SPI2X1	= 0 ; Double SPI Speed Bit
                                 .equ	WCOL1	= 6 ; Write Collision Flag
                                 .equ	SPIF1	= 7 ; SPI Interrupt Flag
                                 
                                 ; SPCR1 - SPI Control Register
                                 .equ	SPR10	= 0 ; SPI Clock Rate Selects
                                 .equ	SPR11	= 1 ; SPI Clock Rate Selects
                                 .equ	CPHA1	= 2 ; Clock Phase
                                 .equ	CPOL1	= 3 ; Clock polarity
                                 .equ	MSTR1	= 4 ; Master/Slave Select
                                 .equ	DORD1	= 5 ; Data Order
                                 .equ	SPE1	= 6 ; SPI Enable
                                 .equ	SPIE1	= 7 ; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WDT *****************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDE	= 3 ; Watch Dog Enable
                                 .equ	WDCE	= 4 ; Watchdog Change Enable
                                 .equ	WDP0	= 0 ; Watchdog Timer Prescaler Bits
                                 .equ	WDP1	= 1 ; Watchdog Timer Prescaler Bits
                                 .equ	WDP2	= 2 ; Watchdog Timer Prescaler Bits
                                 .equ	WDP3	= 5 ; Watchdog Timer Prescaler Bits
                                 .equ	WDIE	= 6 ; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7 ; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** PTC *****************
                                 ; ***** CPU *****************
                                 ; PRR0 - Power Reduction Register 0
                                 .equ	PRADC	= 0 ; Power Reduction ADC
                                 .equ	PRUSART0	= 1 ; Power Reduction USART0
                                 .equ	PRSPI0	= 2 ; Power Reduction Serial Peripheral Interface 1
                                 .equ	PRTIM1	= 3 ; Power Reduction Timer/Counter1
                                 .equ	PRUSART1	= 4 ; Power Reduction USART1
                                 .equ	PRTIM0	= 5 ; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6 ; Power Reduction Timer/Counter2
                                 .equ	PRTWI0	= 7 ; Power Reduction TWI0
                                 
                                 ; PRR1 - Power Reduction Register 1
                                 .equ	PRTIM3	= 0 ; Power Reduction Timer/Counter3
                                 .equ	PRSPI1	= 2 ; Power Reduction Serial Peripheral Interface 1
                                 .equ	PRTIM4	= 3 ; Power Reduction Timer/Counter4
                                 .equ	PRPTC	= 4 ; Power Reduction Peripheral Touch Controller
                                 .equ	PRTWI1	= 5 ; Power Reduction TWI1
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	OSCCAL0	= 0 ; Oscillator Calibration
                                 .equ	OSCCAL1	= 1 ; Oscillator Calibration
                                 .equ	OSCCAL2	= 2 ; Oscillator Calibration
                                 .equ	OSCCAL3	= 3 ; Oscillator Calibration
                                 .equ	OSCCAL4	= 4 ; Oscillator Calibration
                                 .equ	OSCCAL5	= 5 ; Oscillator Calibration
                                 .equ	OSCCAL6	= 6 ; Oscillator Calibration
                                 .equ	OSCCAL7	= 7 ; Oscillator Calibration
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0 ; Clock Prescaler Select Bits
                                 .equ	CLKPS1	= 1 ; Clock Prescaler Select Bits
                                 .equ	CLKPS2	= 2 ; Clock Prescaler Select Bits
                                 .equ	CLKPS3	= 3 ; Clock Prescaler Select Bits
                                 .equ	CLKPCE	= 7 ; Clock Prescaler Change Enable
                                 
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0 ; Carry Flag
                                 .equ	SREG_Z	= 1 ; Zero Flag
                                 .equ	SREG_N	= 2 ; Negative Flag
                                 .equ	SREG_V	= 3 ; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4 ; Sign Bit
                                 .equ	SREG_H	= 5 ; Half Carry Flag
                                 .equ	SREG_T	= 6 ; Bit Copy Storage
                                 .equ	SREG_I	= 7 ; Global Interrupt Enable
                                 
                                 ; SP - Stack Pointer
                                 .equ	SPH0	= 0 ; Stack Pointer High Bit 8
                                 .equ	SPH1	= 1 ; Stack Pointer High Bit 9
                                 .equ	SPH2	= 2 ; Stack Pointer High Bit 10
                                 .equ	SPH3	= 3 ; Stack Pointer High Bit 11
                                 
                                 .equ	SPL0	= 0 ; Stack Pointer Low Bit 0
                                 .equ	SPL1	= 1 ; Stack Pointer Low Bit 1
                                 .equ	SPL2	= 2 ; Stack Pointer Low Bit 2
                                 .equ	SPL3	= 3 ; Stack Pointer Low Bit 3
                                 .equ	SPL4	= 4 ; Stack Pointer Low Bit 4
                                 .equ	SPL5	= 5 ; Stack Pointer Low Bit 5
                                 .equ	SPL6	= 6 ; Stack Pointer Low Bit 6
                                 .equ	SPL7	= 7 ; Stack Pointer Low Bit 7
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ	SPMEN	= 0 ; Store Program Memory
                                 .equ	PGERS	= 1 ; Page Erase
                                 .equ	PGWRT	= 2 ; Page Write
                                 .equ	BLBSET	= 3 ; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4 ; Read-While-Write section read enable
                                 .equ	SIGRD	= 5 ; Signature Row Read
                                 .equ	RWWSB	= 6 ; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7 ; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0 ; 
                                 .equ	IVSEL	= 1 ; 
                                 .equ	PUD	= 4 ; 
                                 .equ	BODSE	= 5 ; BOD Sleep Enable
                                 .equ	BODS	= 6 ; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0 ; Power-on reset flag
                                 .equ	EXTRF	= 1 ; External Reset Flag
                                 .equ	BORF	= 2 ; Brown-out Reset Flag
                                 .equ	WDRF	= 3 ; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0 ; Sleep Enable
                                 .equ	SM0	= 1 ; Sleep Mode Select Bits
                                 .equ	SM1	= 2 ; Sleep Mode Select Bits
                                 .equ	SM2	= 3 ; Sleep Mode Select Bits
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0 ; General Purpose I/O Register 2 Bit 0
                                 .equ	GPIOR21	= 1 ; General Purpose I/O Register 2 Bit 1
                                 .equ	GPIOR22	= 2 ; General Purpose I/O Register 2 Bit 2
                                 .equ	GPIOR23	= 3 ; General Purpose I/O Register 2 Bit 3
                                 .equ	GPIOR24	= 4 ; General Purpose I/O Register 2 Bit 4
                                 .equ	GPIOR25	= 5 ; General Purpose I/O Register 2 Bit 5
                                 .equ	GPIOR26	= 6 ; General Purpose I/O Register 2 Bit 6
                                 .equ	GPIOR27	= 7 ; General Purpose I/O Register 2 Bit 7
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0 ; General Purpose I/O Register 1 Bit 0
                                 .equ	GPIOR11	= 1 ; General Purpose I/O Register 1 Bit 1
                                 .equ	GPIOR12	= 2 ; General Purpose I/O Register 1 Bit 2
                                 .equ	GPIOR13	= 3 ; General Purpose I/O Register 1 Bit 3
                                 .equ	GPIOR14	= 4 ; General Purpose I/O Register 1 Bit 4
                                 .equ	GPIOR15	= 5 ; General Purpose I/O Register 1 Bit 5
                                 .equ	GPIOR16	= 6 ; General Purpose I/O Register 1 Bit 6
                                 .equ	GPIOR17	= 7 ; General Purpose I/O Register 1 Bit 7
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0 ; General Purpose I/O Register 0 Bit 0
                                 .equ	GPIOR01	= 1 ; General Purpose I/O Register 0 Bit 1
                                 .equ	GPIOR02	= 2 ; General Purpose I/O Register 0 Bit 2
                                 .equ	GPIOR03	= 3 ; General Purpose I/O Register 0 Bit 3
                                 .equ	GPIOR04	= 4 ; General Purpose I/O Register 0 Bit 4
                                 .equ	GPIOR05	= 5 ; General Purpose I/O Register 0 Bit 5
                                 .equ	GPIOR06	= 6 ; General Purpose I/O Register 0 Bit 6
                                 .equ	GPIOR07	= 7 ; General Purpose I/O Register 0 Bit 7
                                 
                                 
                                 ; ***** EEPROM *****************
                                 ; EEAR - EEPROM Address Register Bytes
                                 .equ	EEARH0	= 0 ; EEPROM Address Register Bytes High Bit 8
                                 .equ	EEARH1	= 1 ; EEPROM Address Register Bytes High Bit 9
                                 
                                 .equ	EEARL0	= 0 ; EEPROM Address Register Bytes Low Bit 0
                                 .equ	EEARL1	= 1 ; EEPROM Address Register Bytes Low Bit 1
                                 .equ	EEARL2	= 2 ; EEPROM Address Register Bytes Low Bit 2
                                 .equ	EEARL3	= 3 ; EEPROM Address Register Bytes Low Bit 3
                                 .equ	EEARL4	= 4 ; EEPROM Address Register Bytes Low Bit 4
                                 .equ	EEARL5	= 5 ; EEPROM Address Register Bytes Low Bit 5
                                 .equ	EEARL6	= 6 ; EEPROM Address Register Bytes Low Bit 6
                                 .equ	EEARL7	= 7 ; EEPROM Address Register Bytes Low Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0 ; EEPROM Data Register Bit 0
                                 .equ	EEDR1	= 1 ; EEPROM Data Register Bit 1
                                 .equ	EEDR2	= 2 ; EEPROM Data Register Bit 2
                                 .equ	EEDR3	= 3 ; EEPROM Data Register Bit 3
                                 .equ	EEDR4	= 4 ; EEPROM Data Register Bit 4
                                 .equ	EEDR5	= 5 ; EEPROM Data Register Bit 5
                                 .equ	EEDR6	= 6 ; EEPROM Data Register Bit 6
                                 .equ	EEDR7	= 7 ; EEPROM Data Register Bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0 ; EEPROM Read Enable
                                 .equ	EEPE	= 1 ; EEPROM Write Enable
                                 .equ	EEMPE	= 2 ; EEPROM Master Write Enable
                                 .equ	EERIE	= 3 ; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4 ; EEPROM Programming Mode Bits
                                 .equ	EEPM1	= 5 ; EEPROM Programming Mode Bits
                                 
                                 
                                 ; ***** FUSE *****************
                                 ; EXTENDED - 
                                 .equ	BODLEVEL0	= 0 ; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1 ; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2 ; Brown-out Detector trigger level
                                 .equ	CFD	= 3 ; Clock Failure Detection
                                 
                                 ; HIGH - 
                                 .equ	BOOTRST	= 0 ; Boot Reset vector Enabled
                                 .equ	BOOTSZ0	= 1 ; Select boot size
                                 .equ	BOOTSZ1	= 2 ; Select boot size
                                 .equ	EESAVE	= 3 ; Preserve EEPROM through the Chip Erase cycle
                                 .equ	WDTON	= 4 ; Watch-dog Timer always on
                                 .equ	SPIEN	= 5 ; Serial program downloading (SPI) enabled
                                 .equ	DWEN	= 6 ; Debug Wire enable
                                 .equ	RSTDISBL	= 7 ; Reset Disabled (Enable PC6 as i/o pin)
                                 
                                 ; LOW - 
                                 .equ	SUT_CKSEL0	= 0 ; Select Clock Source
                                 .equ	SUT_CKSEL1	= 1 ; Select Clock Source
                                 .equ	SUT_CKSEL2	= 2 ; Select Clock Source
                                 .equ	SUT_CKSEL3	= 3 ; Select Clock Source
                                 .equ	SUT_CKSEL4	= 4 ; Select Clock Source
                                 .equ	SUT_CKSEL5	= 5 ; Select Clock Source
                                 .equ	CKOUT	= 6 ; Clock output on PORTB0
                                 .equ	CKDIV8	= 7 ; Divide clock by 8 internally
                                 
                                 
                                 ; ***** LOCKBIT *****************
                                 ; LOCKBIT - 
                                 .equ	LB1	= 0 ; Memory Lock
                                 .equ	LB2	= 1 ; Memory Lock
                                 .equ	BLB01	= 2 ; Boot Loader Protection Mode
                                 .equ	BLB02	= 3 ; Boot Loader Protection Mode
                                 .equ	BLB11	= 4 ; Boot Loader Protection Mode
                                 .equ	BLB12	= 5 ; Boot Loader Protection Mode
                                 
                                 
                                 ; ***** CFD *****************
                                 ; XFDCSR - XOSC Failure Detection Control and Status Register
                                 .equ	XFDIE	= 0 ; Failure Detection Interrupt Enable
                                 .equ	XFDIF	= 1 ; Failure Detection Interrupt Flag
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHSTART	= 0x0000 ; Note: Word address
                                 .equ	FLASHEND	= 0x3FFF ; Note: Word address
                                 .equ	FLASHPAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION1START	= 0x3F00 ; Note: Word address
                                 .equ	BOOTSECTION1END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION1PAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION2START	= 0x3E00 ; Note: Word address
                                 .equ	BOOTSECTION2END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION2PAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION3START	= 0x3C00 ; Note: Word address
                                 .equ	BOOTSECTION3END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION3PAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION4START	= 0x3800 ; Note: Word address
                                 .equ	BOOTSECTION4END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION4PAGESIZE	= 0x0080 ;
                                 
                                 .equ	IOEND	= 0x00FF
                                 
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08FF
                                 
                                 .equ	E2END	= 0x03FF
                                 .equ	EEPROMEND	= 0x03FF
                                 .equ	EEADRBITS	= 10
                                 
                                 .equ	XRAMEND	= 0x0000
                                 
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	PAGESIZE	= 0x0080 ;
                                 
                                 .equ	FIRSTBOOTSTART	= 0x7E00 ; Note: Word address
                                 .equ	FIRSTBOOTPAGESIZE	= 0x0080 ;
                                 .equ	FIRSTBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	SECONDBOOTSTART	= 0x7C00 ; Note: Word address
                                 .equ	SECONDBOOTPAGESIZE	= 0x0080 ;
                                 .equ	SECONDBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	THIRDBOOTSTART	= 0x7800 ; Note: Word address
                                 .equ	THIRDBOOTPAGESIZE	= 0x0080 ;
                                 .equ	THIRDBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	FOURTHBOOTSTART	= 0x7000 ; Note: Word address
                                 .equ	FOURTHBOOTPAGESIZE	= 0x0080 ;
                                 .equ	FOURTHBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	 SMALLBOOTSTART	= FIRSTBOOTSTART ;
                                 .equ	 LARGEBOOTSTART	= FOURTHBOOTSTART ;
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	 = 0x0002 ; External Interrupt Request 0
                                 .equ	INT1addr	 = 0x0004 ; External Interrupt Request 1
                                 .equ	PCINT0addr	 = 0x0006 ; Pin Change Interrupt Request 0
                                 .equ	PCINT1addr	 = 0x0008 ; Pin Change Interrupt Request 1
                                 .equ	PCINT2addr	 = 0x000A ; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	 = 0x000C ; Watchdog Time-out Interrupt
                                 .equ	TIMER2_COMPAaddr	 = 0x000E ; Timer/Counter2 Compare Match A
                                 .equ	TIMER2_COMPBaddr	 = 0x0010 ; Timer/Counter2 Compare Match B
                                 .equ	TIMER2_OVFaddr	 = 0x0012 ; Timer/Counter2 Overflow
                                 .equ	TIMER1_CAPTaddr	 = 0x0014 ; Timer/Counter1 Capture Event
                                 .equ	TIMER1_COMPAaddr	 = 0x0016 ; Timer/Counter1 Compare Match A
                                 .equ	TIMER1_COMPBaddr	 = 0x0018 ; Timer/Counter1 Compare Match B
                                 .equ	TIMER1_OVFaddr	 = 0x001A ; Timer/Counter1 Overflow
                                 .equ	TIMER0_COMPAaddr	 = 0x001C ; TimerCounter0 Compare Match A
                                 .equ	TIMER0_COMPBaddr	 = 0x001E ; TimerCounter0 Compare Match B
                                 .equ	TIMER0_OVFaddr	 = 0x0020 ; Timer/Couner0 Overflow
                                 .equ	SPI0_STCaddr	 = 0x0022 ; SPI Serial Transfer Complete
                                 .equ	USART0_RXaddr	 = 0x0024 ; USART0 Rx Complete
                                 .equ	USART0_UDREaddr	 = 0x0026 ; USART0, Data Register Empty
                                 .equ	USART0_TXaddr	 = 0x0028 ; USART0 Tx Complete
                                 .equ	ADCaddr	 = 0x002A ; ADC Conversion Complete
                                 .equ	EE_READYaddr	 = 0x002C ; EEPROM Ready
                                 .equ	ANALOG_COMPaddr	 = 0x002E ; Analog Comparator
                                 .equ	TWI0addr	 = 0x0030 ; Two-wire Serial Interface
                                 .equ	SPM_Readyaddr	 = 0x0032 ; Store Program Memory Read
                                 .equ	USART0_STARTaddr	 = 0x0034 ; USART0 Start frame detection
                                 .equ	PCINT3addr	 = 0x0036 ; Pin Change Interrupt Request 3
                                 .equ	USART1_RXaddr	 = 0x0038 ; USART1 Rx Complete
                                 .equ	USART1_UDREaddr	 = 0x003A ; USART1, Data Register Empty
                                 .equ	USART1_TXaddr	 = 0x003C ; USART1 Tx Complete
                                 .equ	USART1_STARTaddr	 = 0x003E ; USART1 Start frame detection
                                 .equ	TIMER3_CAPTaddr	 = 0x0040 ; Timer/Counter3 Capture Event
                                 .equ	TIMER3_COMPAaddr	 = 0x0042 ; Timer/Counter3 Compare Match A
                                 .equ	TIMER3_COMPBaddr	 = 0x0044 ; Timer/Counter3 Compare Match B
                                 .equ	TIMER3_OVFaddr	 = 0x0046 ; Timer/Counter3 Overflow
                                 .equ	CFDaddr	 = 0x0048 ; Clock failure detection interrupt
                                 .equ	PTC_EOCaddr	 = 0x004A ; PTC End of conversion
                                 .equ	PTC_WCOMPaddr	 = 0x004C ; PTC Window comparator mode
                                 .equ	SPI1_STCaddr	 = 0x004E ; SPI1 Serial Transfer Complete
                                 .equ	TWI1addr	 = 0x0050 ; TWI Transfer Complete
                                 .equ	TIMER4_CAPTaddr	 = 0x0052 ; Timer/Counter4 Capture Event
                                 .equ	TIMER4_COMPAaddr	 = 0x0054 ; Timer/Counter4 Compare Match A
                                 .equ	TIMER4_COMPBaddr	 = 0x0056 ; Timer/Counter4 Compare Match B
                                 .equ	TIMER4_OVFaddr	 = 0x0058 ; Timer/Counter4 Overflow
                                 
                                 .equ	INT_VECTORS_SIZE	= 90 ; size in words
                                 
                                 #endif /* _M328PBDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 
                                 
                                 ; EGrzyb_CatParty.asm
                                 ;
                                 ; Created: 11/30/2018 9:38:23 AM
                                 ; Author : Liz Grzyb
                                 ;
                                 
                                 ;----------------------------------------------------------------------------
                                 ;PRE - SETUP
                                 ;----------------------------------------------------------------------------
                                 
                                 .equ        WIDTH    = 128				;Screen dimensions                        
                                 .equ        HEIGHT   = 64
                                 .def		io_setup = r16
                                 .def		reg_workhorse = r20
                                 .def		reg_SPI_data = r17
                                 .def		work = r25
                                 .def		adc_value_high	= r13		; used to manipulate the high byte of the result of the ADC conversion
                                 .def		adc_value_low	= r14		; used to manipulate the high byte of the result of the ADC conversion
                                 .def		adcsra_config   = r15
                                 
                                 .macro		set_pointer					;macro for pointers
                                 			ldi			@0, low(@2<<1)
                                 			ldi			@1, high(@2<<1)
                                 .endmacro
                                 
                                 .cseg
                                 .org		0x0000
000000 c0ff                      rjmp		setup
                                 .org		0x0100
                                 
                                 ;----------------------------------------------------------------------------
                                 ;SETUP
                                 ;----------------------------------------------------------------------------
                                 
                                 setup:
000100 d14a                      		rcall			OLED_initialize			;initialize OLED
000101 d628                      		rcall			GFX_clear_array			;clear screen
000102 e1a0
000103 e0b2                      		set_pointer		XL, XH, pixel_array		;look for values in pixel_array
000104 d177                      		rcall			OLED_refresh_screen		;refresh screen
000105 d00f                      		rcall			setup_pot				;setup potentiometer
000106 e068                      		ldi				r22, 8					;just a value to move across the screen and draw different parts of the cat.
                                 
                                 ;----------------------------------------------------------------------------
                                 ;LOOP 
                                 ;Description: r18 is the x position and r19 is the y position of the 
                                 ;first cat on the screen. This is from the TOP LEFT corner of the cat.
                                 ;----------------------------------------------------------------------------
                                 
                                 loop:
                                 
                                 	;(2,1) cat left ear
000107 e3e8
000108 e0fd                      	set_pointer		ZL, ZH, earL
000109 d612                      	rcall	GFX_set_shape			;which shape to write from char table
00010a d01f                      	rcall	getX
00010b e134                      	ldi		r19, 20
                                 	;rcall	getY
                                 
00010c d5d7                      	rcall	GFX_set_array_pos		;set array position
00010d d600                      	rcall	GFX_draw_shape			;draw a shape to the OLED
00010e 0f26                      	add		r18, r22				;setting up r18 to draw the next part of the cat
                                 
00010f d038                      	rcall	drawCat					;jump to subroutine to draw the rest of the cat. (I moved this to another section because
                                 									;it was a lot of code, and was making it hard to rcall to othersubroutines because of distance.
000110 e1a0
000111 e0b2                      	set_pointer		XL, XH, pixel_array
000112 d169                      	rcall	OLED_refresh_screen		;refresh screen
000113 d616                      	rcall	GFX_clear_array			;clear screen
                                 
000114 cff2                      	rjmp	loop
                                 
                                 
                                 
                                 ;----------------------------------------------------------------------------
                                 ;SUBROUTINES
                                 ;----------------------------------------------------------------------------
                                 
                                 ;setting up the potentiometers to be read by ADCSRA
                                 setup_pot:
                                 		
000115 ec97                      		ldi			work, 0b11000111
000116 2ef9                      		mov         adcsra_config, work 	;enabling pins on adcsra register
000117 9390 007a                 		sts			ADCSRA, work
000119 9508                      		ret
                                 
                                 ;Read the X position of the cat and store it into register 18
                                 read_cat_pos:	  
                                 
00011a 92f0 007a                 		sts			ADCSRA, adcsra_config 
                                 
00011c 9190 007a                 		wait_adc:	lds			work, ADCSRA					;loading into workhorse the value of ADCSRA
00011e 7190                      					andi		work, 0b00010000				;testing against the interrupt flag of ADCSRA (ADIF)
00011f f3e1                      					breq		wait_adc						;if the flag is not set, keep waiting
                                 
                                 		show:
000120 90e0 0078                 					lds			adc_value_low, ADCL				;x position on screen
000122 90d0 0079                 					lds			adc_value_high, ADCH
000124 94d7                      					ror			adc_value_high					;put ADCH and ADCL into one register (adc_value_low)
000125 94e7                      					ror			adc_value_low
000126 94d7                      					ror			adc_value_high
000127 94e7                      					ror			adc_value_low
                                 
000128 94e6                      					lsr			adc_value_low
                                 
000129 9508                      					ret
                                 
                                 
                                 getX:
00012a e495                      	ldi			work, 0b01000101		;Set ADMUX to read x position (ADC5)
00012b 9390 007c                 	sts			ADMUX, work				
00012d dfec                      	rcall		read_cat_pos			;start reading cat position based on potentiometer in ADC5
                                 
00012e 2d2e                      	mov			r18, adc_value_low				;load adc value into x position register
                                 
00012f e098                      	ldi			work, 8							;check if cat falls too far to the left of the screen
000130 1792                      	cp			work, r18						
000131 f474                      	brge		overLowX						;if it does, break to subroutine to make sure it doesn't
000132 e695                      	ldi			work, 101						;check if cat falls too far to the right of the screen
000133 1729                      	cp			r18, work
000134 f46c                      	brge		overHighX						;if it does, break to subroutine to make sure it doesn't
000135 9508                      	ret
                                 
                                 getY:
000136 e890                      	ldi			work, 0b010000000		;Set ADMUX to read y position (ADC2)
000137 9390 007c                 	sts			ADMUX, work				
000139 dfe0                      	rcall		read_cat_pos			;start reading cat position based on potentiometer in ADC2
                                 
00013a 2d2e                      	mov			r18, adc_value_low				;load adc value into x position register
                                 
00013b e098                      	ldi			work, 8							;check if cat falls too far to the left of the screen
00013c 1793                      	cp			work, r19						
                                 	;brge		overLowY						;if it does, break to subroutine to make sure it doesn't
00013d e695                      	ldi			work, 101						;check if cat falls too far to the right of the screen
00013e 1739                      	cp			r19, work
                                 	;brge		overHighY						;if it does, break to subroutine to make sure it doesn't
00013f 9508                      	ret
                                 
                                 ;The over subroutines make sure that the cat stays within the boundaries of the OLED screen
                                 overLowX:
000140 e028                      		ldi r18, 8	
                                 													;set cat at the left edge of screen
                                 		;rjmp read_cat_posX
000141 9508                      		ret
                                 
                                 overHighX:														;set cat at right edge of screen
000142 e625                      		ldi	r18, 101
                                 	;	rjmp read_cat_posX
000143 9508                      	ret
                                 overLowY:
000144 e038                      		ldi r19, 8												;set cat at the bottom of screen
                                 		;rjmp read_cat_posY
000145 9508                      		ret
                                 
                                 overHighY:														;set cat at the top of screen
000146 e635                      		ldi	r19, 101
                                 		;rjmp read_cat_posY
000147 9508                      		ret
                                 
                                 ;This section draws the rest of the cat based on the initial square of the cat drawn from the potentiometers
                                 drawCat:
                                 	;(3,1) cat top head
000148 e4e0
000149 e0fd                      	set_pointer		ZL, ZH, top
00014a d5d1                      	rcall	GFX_set_shape			;which shape to write from char table
00014b d598                      	rcall	GFX_set_array_pos		;set array position
00014c d5c1                      	rcall	GFX_draw_shape			;draw a shape to the OLED
00014d 0f26                      	add		r18, r22
                                 	
                                 	;(4,1) cat right ear
00014e e4e8
00014f e0fd                      	set_pointer		ZL, ZH, earR
000150 d5cb                      	rcall	GFX_set_shape			;which shape to write from char table
000151 d592                      	rcall	GFX_set_array_pos		;set array position
000152 d5bb                      	rcall	GFX_draw_shape			;draw a shape to the OLED
000153 0f36                      	add		r19, r22
                                 
                                 	;cat LR corner
000154 e5e8
000155 e0fd                      	set_pointer		ZL, ZH, eyeR
000156 d5c5                      	rcall	GFX_set_shape			;which shape to write from char table
000157 d58c                      	rcall	GFX_set_array_pos		;set array position
000158 d5b5                      	rcall	GFX_draw_shape			;draw a shape to the OLED
000159 1b26                      	sub		r18, r22
                                 
                                 	;cat LR corner
00015a e6e0
00015b e0fd                      	set_pointer		ZL, ZH, eyeL
00015c d5bf                      	rcall	GFX_set_shape			;which shape to write from char table
00015d d586                      	rcall	GFX_set_array_pos		;set array position
00015e d5af                      	rcall	GFX_draw_shape			;draw a shape to the OLED
00015f 1b26                      	sub		r18, r22
                                 
                                 	;cat LR corner
000160 e6e8
000161 e0fd                      	set_pointer		ZL, ZH, eyeL2
000162 d5b9                      	rcall	GFX_set_shape			;which shape to write from char table
000163 d580                      	rcall	GFX_set_array_pos		;set array position
000164 d5a9                      	rcall	GFX_draw_shape			;draw a shape to the OLED
000165 0f36                      	add		r19, r22
                                 
000166 e7e0
000167 e0fd                      	set_pointer		ZL, ZH, left2
000168 d5b3                      	rcall	GFX_set_shape			;which shape to write from char table
000169 d57a                      	rcall	GFX_set_array_pos		;set array position
00016a d5a3                      	rcall	GFX_draw_shape			;draw a shape to the OLED
00016b 0f26                      	add		r18, r22
                                 	
00016c e7e8
00016d e0fd                      	set_pointer		ZL, ZH, mouth
00016e d5ad                      	rcall	GFX_set_shape			;which shape to write from char table
00016f d574                      	rcall	GFX_set_array_pos		;set array position
000170 d59d                      	rcall	GFX_draw_shape			;draw a shape to the OLED
000171 0f26                      	add		r18, r22
                                 
000172 e8e0
000173 e0fd                      	set_pointer		ZL, ZH, right2
000174 d5a7                      	rcall	GFX_set_shape			;which shape to write from char table
000175 d56e                      	rcall	GFX_set_array_pos		;set array position
000176 d597                      	rcall	GFX_draw_shape			;draw a shape to the OLED
                                 		
                                 
                                 ;part to draw "cat party" at bottom of screen 
000177 e02c                      	ldi r18, 12						;position of first letter
000178 e33e                      	ldi	r19, 62
                                 
000179 e5e0
00017a e0f5                      	set_pointer		ZL, ZH, Char_003
00017b d5a0                      	rcall	GFX_set_shape			;which shape to write from char table
00017c d567                      	rcall	GFX_set_array_pos		;set array position
00017d d590                      	rcall	GFX_draw_shape			;draw a shape to the OLED
00017e 0f26                      	add		r18, r22
                                 
00017f e3e0
000180 e0fd                      	set_pointer		ZL, ZH, Char_255
000181 d59a                      	rcall	GFX_set_shape			;which shape to write from char table
000182 d561                      	rcall	GFX_set_array_pos		;set array position
000183 d58a                      	rcall	GFX_draw_shape			;draw a shape to the OLED
000184 0f26                      	add		r18, r22
                                 	
000185 e5e0
000186 e0f7                      	set_pointer		ZL, ZH, Char_067
000187 d594                      	rcall	GFX_set_shape			;which shape to write from char table
000188 d55b                      	rcall	GFX_set_array_pos		;set array position
000189 d584                      	rcall	GFX_draw_shape			;draw a shape to the OLED
00018a 0f26                      	add		r18, r22
                                 
00018b e4e0
00018c e0f7                      	set_pointer		ZL, ZH, Char_065
00018d d58e                      	rcall	GFX_set_shape			;which shape to write from char table
00018e d555                      	rcall	GFX_set_array_pos		;set array position
00018f d57e                      	rcall	GFX_draw_shape			;draw a shape to the OLED
000190 0f26                      	add		r18, r22
                                 	
000191 ede8
000192 e0f7                      	set_pointer		ZL, ZH, Char_084
000193 d588                      	rcall	GFX_set_shape			;which shape to write from char table
000194 d54f                      	rcall	GFX_set_array_pos		;set array position
000195 d578                      	rcall	GFX_draw_shape			;draw a shape to the OLED
000196 0f26                      	add		r18, r22
                                 
000197 e3e0
000198 e0fd                      	set_pointer		ZL, ZH, Char_255
000199 d582                      	rcall	GFX_set_shape			;which shape to write from char table
00019a d549                      	rcall	GFX_set_array_pos		;set array position
00019b d572                      	rcall	GFX_draw_shape			;draw a shape to the OLED
00019c 0f26                      	add		r18, r22
                                 
00019d ebe8
00019e e0f7                      	set_pointer		ZL, ZH, Char_080
00019f d57c                      	rcall	GFX_set_shape			;which shape to write from char table
0001a0 d543                      	rcall	GFX_set_array_pos		;set array position
0001a1 d56c                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001a2 0f26                      	add		r18, r22
                                 
0001a3 e4e0
0001a4 e0f7                      	set_pointer		ZL, ZH, Char_065
0001a5 d576                      	rcall	GFX_set_shape			;which shape to write from char table
0001a6 d53d                      	rcall	GFX_set_array_pos		;set array position
0001a7 d566                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001a8 0f26                      	add		r18, r22
                                 
0001a9 ece8
0001aa e0f7                      	set_pointer		ZL, ZH, Char_082
0001ab d570                      	rcall	GFX_set_shape			;which shape to write from char table
0001ac d537                      	rcall	GFX_set_array_pos		;set array position
0001ad d560                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001ae 0f26                      	add		r18, r22
                                 
0001af ede8
0001b0 e0f7                      	set_pointer		ZL, ZH, Char_084
0001b1 d56a                      	rcall	GFX_set_shape			;which shape to write from char table
0001b2 d531                      	rcall	GFX_set_array_pos		;set array position
0001b3 d55a                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001b4 0f26                      	add		r18, r22
                                 
0001b5 e0e0
0001b6 e0f8                      	set_pointer		ZL, ZH, Char_089
0001b7 d564                      	rcall	GFX_set_shape			;which shape to write from char table
0001b8 d52b                      	rcall	GFX_set_array_pos		;set array position
0001b9 d554                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001ba 0f26                      	add		r18, r22
                                 
0001bb e3e0
0001bc e0fd                      	set_pointer		ZL, ZH, Char_255
0001bd d55e                      	rcall	GFX_set_shape			;which shape to write from char table
0001be d525                      	rcall	GFX_set_array_pos		;set array position
0001bf d54e                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001c0 0f26                      	add		r18, r22
                                 
0001c1 e5e0
0001c2 e0f5                      	set_pointer		ZL, ZH, Char_003
0001c3 d558                      	rcall	GFX_set_shape			;which shape to write from char table
0001c4 d51f                      	rcall	GFX_set_array_pos		;set array position
0001c5 d548                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001c6 0f26                      	add		r18, r22
                                 
                                 ;part to draw secret message at top of screen
0001c7 e030                      	ldi r19, 0
0001c8 e228                      	ldi r18, 40
                                 
0001c9 e8e8
0001ca e0fd                      	set_pointer		ZL, ZH, s1
0001cb d550                      	rcall	GFX_set_shape			;which shape to write from char table
0001cc d517                      	rcall	GFX_set_array_pos		;set array position
0001cd d540                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001ce 0f26                      	add		r18, r22
                                 	
0001cf e9e0
0001d0 e0fd                      	set_pointer		ZL, ZH, s2
0001d1 d54a                      	rcall	GFX_set_shape			;which shape to write from char table
0001d2 d511                      	rcall	GFX_set_array_pos		;set array position
0001d3 d53a                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001d4 0f26                      	add		r18, r22
                                 
0001d5 e9e8
0001d6 e0fd                      	set_pointer		ZL, ZH, s3
0001d7 d544                      	rcall	GFX_set_shape			;which shape to write from char table
0001d8 d50b                      	rcall	GFX_set_array_pos		;set array position
0001d9 d534                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001da 0f26                      	add		r18, r22
                                 	
0001db eae0
0001dc e0fd                      	set_pointer		ZL, ZH, s4
0001dd d53e                      	rcall	GFX_set_shape			;which shape to write from char table
0001de d505                      	rcall	GFX_set_array_pos		;set array position
0001df d52e                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001e0 0f26                      	add		r18, r22
                                 
0001e1 eae8
0001e2 e0fd                      	set_pointer		ZL, ZH, s5
0001e3 d538                      	rcall	GFX_set_shape			;which shape to write from char table
0001e4 d4ff                      	rcall	GFX_set_array_pos		;set array position
0001e5 d528                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001e6 0f26                      	add		r18, r22
                                 	
0001e7 ebe0
0001e8 e0fd                      	set_pointer		ZL, ZH, s6
0001e9 d532                      	rcall	GFX_set_shape			;which shape to write from char table
0001ea d4f9                      	rcall	GFX_set_array_pos		;set array position
0001eb d522                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001ec 0f26                      	add		r18, r22
                                 
0001ed ebe8
0001ee e0fd                      	set_pointer		ZL, ZH, s7
0001ef d52c                      	rcall	GFX_set_shape			;which shape to write from char table
0001f0 d4f3                      	rcall	GFX_set_array_pos		;set array position
0001f1 d51c                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001f2 9508                      	ret
                                 
0001f3 ece0
0001f4 e0fd                      	set_pointer		ZL, ZH, s8
0001f5 d526                      	rcall	GFX_set_shape			;which shape to write from char table
0001f6 d4ed                      	rcall	GFX_set_array_pos		;set array position
0001f7 d516                      	rcall	GFX_draw_shape			;draw a shape to the OLED
0001f8 9508                      	ret
                                 ;----------------------------------------------------------------------------
                                 ;LIBRARIES
                                 ;----------------------------------------------------------------------------
                                 
                                 .include	"lib_delay.asm"
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; lib_delay
                                 ; All delays generated by delay loop calculator at http://www.bretmulvey.com/avrdelay.html
                                 ;
                                 ; registers used (and preserverd):
                                 ;   - r23
                                 ;   - r24
                                 ;   - r25
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Delay 15 999 988 cycles
                                 ; 999ms 999us 250 ns at 16 MHz
                                 ; --------------------------------------------------------------------------------
                                 delay_1s:
0001f9 937f                                                  push            r23
0001fa 938f                                                  push            r24
0001fb 939f                                                  push            r25
0001fc e572                                                  ldi             r23, 82
0001fd e28b                                                  ldi             r24, 43
0001fe ef9d                                                  ldi             r25, 253
                                     delay_1s_cont:          
0001ff 959a                                                  dec             r25
000200 f7f1                                                  brne            delay_1s_cont
000201 958a                                                  dec             r24
000202 f7e1                                                  brne            delay_1s_cont
000203 957a                                                  dec             r23
000204 f7d1                                                  brne            delay_1s_cont
000205 0000                                                  nop
000206 919f                                                  pop             r25
000207 918f                                                  pop             r24
000208 917f                                                  pop             r23
000209 9508                                                  ret
                                 ; --------------------------------------------------------------------------------
                                 ; Delay 1 599 988 cycles
                                 ; 99ms 999us 250 ns at 16 MHz
                                 ; --------------------------------------------------------------------------------
                                 delay_100ms:
00020a 937f                                                  push            r23
00020b 938f                                                  push            r24
00020c 939f                                                  push            r25
00020d e079                                                  ldi             r23, 9
00020e e18e                                                  ldi             r24, 30
00020f ee91                                                  ldi             r25, 225
                                     delay_100ms_cont:
000210 959a                                                  dec             r25
000211 f7f1                                                  brne            delay_100ms_cont
000212 958a                                                  dec             r24
000213 f7e1                                                  brne            delay_100ms_cont
000214 957a                                                  dec             r23
000215 f7d1                                                  brne            delay_100ms_cont
000216 0000                                                  nop
000217 919f                                                  pop             r25
000218 918f                                                  pop             r24
000219 917f                                                  pop             r23
00021a 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Delay 15 992 cycles
                                 ; 999us 500 ns at 16 MHz
                                 ; --------------------------------------------------------------------------------
                                 delay_1ms:
00021b 937f                                                  push            r23
00021c 938f                                                  push            r24
00021d e175                                                  ldi             r23, 21
00021e ec84                                                  ldi             r24, 196
                                     delay_1ms_cont:
00021f 958a                                                  dec             r24
000220 f7f1                                                  brne            delay_1ms_cont
000221 957a                                                  dec             r23
000222 f7e1                                                  brne            delay_1ms_cont
000223 918f                                                  pop             r24
000224 917f                                                  pop             r23
000225 9508                                                  ret
                                 ; --------------------------------------------------------------------------------
                                 .include	"lib_SSD1306_OLED.asm"
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; lib_SSD1306_OLED
                                 ; Description: basic control for Adafruit SSD1306 OLED screen (via SPI only).
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: directives
                                 ; --------------------------------------------------------------------------------
                                 .equ                        SPI_MOSI        = PORTB3 ; 11
                                 .equ                        SPI_MISO        = PORTB4 ; 12
                                 .equ                        SPI_CLK         = PORTB5 ; 13
                                 .equ                        OLED_RST        = PORTB1 ; 9
                                 .equ                        OLED_DC         = PORTB0 ; 8
                                 .equ                        OLED_CS         = PORTB2 ; 10
                                 
                                 //.equ                        WIDTH           = 128                                   ; adjust your screen dimensions here
                                 //.equ                        HEIGHT          = 64                                    ; "
                                 
                                 .include                    "lib_SPI.asm"                                           ; include SPI library
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; lib_SPI
                                 ; Description: control of SPI on ATMega328PB
                                 ; registers used:
                                 ;   - r16: heavy lifter
                                 ;   - r17: data to be sent (during write) or received (during read)
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: initializes SPI device as master
                                 ; subroutine type:
                                 ;   - PUBLIC
                                 ; dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 SPI_master_initialize:
000226 e500                                                  ldi             r16, (1<<SPE)|(1<<MSTR)                 ; enable SPI to master mode, disable interrupt, set shift
000227 bd0c                                                  out             SPCR0, r16                              ; rate to 4 MHz, shift data on rising edge, MSB first, SCK idle low
000228 b50d                                                  in              r16, SPSR0                              ; clear flags and disable double baud rate
000229 b50e                                                  in              r16, SPDR0                              ; "
00022a e000                                                  ldi             r16, 0                                  ; clear SPI2X bit
00022b bd0d                                                  out             SPSR0, r16                              ; "
00022c 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: initializes SPI devies as slave
                                 ; subroutine type:
                                 ;   - PUBLIC
                                 ; dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 SPI_slave_initialize:
00022d e400                                                  ldi             r16, (1<<SPE)|(0<<MSTR)                 ; enable SPI to slave mode, disable interrupt, set shift
00022e bd0c                                                  out             SPCR0, r16                              ; rate to 4 MHz, shift data on rising edge, MSB first, SCK idle low
00022f b50d                                                  in              r16, SPSR0                              ; clear flags and disable double baud rate
000230 b50e                                                  in              r16, SPDR0                              ; "
000231 e000                                                  ldi             r16, 0                                  ; clear SPI2X bit
000232 bd0d                                                  out             SPSR0, r16                              ; "
000233 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sends a byte of information from the master
                                 ; subroutine type:
                                 ;   - PUBLIC
                                 ; dependencies:
                                 ;   - r17: byte to be sent
                                 ; --------------------------------------------------------------------------------
                                 SPI_master_transmit:
000234 bd1e                                                  out             SPDR0, r17                              ; Start transmission of data
                                     SPI_master_transmit_wait:
000235 b50d                                                  in              r16, SPSR0
000236 ff07                                                  sbrs            r16, SPIF                               ; wait until SPIF is set
000237 cffd                                                  rjmp            SPI_master_transmit_wait                ; "
000238 b50e                                                  in              r16, SPDR0                              ; clear the SPIF flag
000239 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: receives a byte of information from the slave (into r17)
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 SPI_master_receive:
00023a bd0e                                                  out             SPDR0, r16                              ; Start transmission of data
                                     SPI_slave_receive_wait:
00023b b50d                                                  in              r16, SPSR0
00023c ff07                                                  sbrs            r16, SPIF                               ; wait until SPIF is set
00023d cffd                                                  rjmp            SPI_slave_receive_wait                  ; "
00023e b51e                                                  in              r17, SPDR0                              ; fetch data and clear SPIF flag
00023f 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sends a byte of infomation from the slave
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - r17: byte to be sent
                                 ; --------------------------------------------------------------------------------
                                 SPI_slave_transmit:
000240 bd1e                                                  out             SPDR0, r17                              ; Start transmission of data
                                     SPI_slave_transmit_wait:
000241 b50d                                                  in              r16, SPSR0
000242 ff07                                                  sbrs            r16, SPIF                               ; wait until SPIF is set
000243 cffd                                                  rjmp            SPI_slave_transmit_wait                 ; "
000244 b50e                                                  in              r16, SPDR0                              ; clear the SPIF flag
000245 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: receives a byte of infomation from the master (into r17)
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 SPI_slave_receive:
000246 b50d                                                  in              r16, SPSR0
000247 ff07                                                  sbrs            r16, SPIF                               ; wait until SPIF is set
000248 cffd                                                  rjmp            SPI_slave_receive                       ; "
000249 b51e                                                  in              r17, SPDR0                              ; clear the SPIF flag
00024a 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: initialises OLED screen.
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 OLED_initialize:
00024b dfda                                                  rcall           SPI_master_initialize
00024c e20f                                                  ldi             r16, (1<<SPI_MOSI)|(1<<SPI_CLK)|(1<<OLED_RST)|(1<<OLED_DC)|(1<<OLED_CS)
00024d b904                                                  out             DDRB, r16
00024e e000                                                  ldi             r16, 0
00024f b905                                                  out             PORTB, r16
                                                             
000250 9a29                                                  sbi             PORTB, OLED_RST
000251 dfc9                                                  rcall           delay_1ms
000252 9829                                                  cbi             PORTB, OLED_RST
000253 dfc7                                                  rcall           delay_1ms
000254 9a29                                                  sbi             PORTB, OLED_RST
000255 dfc5                                                  rcall           delay_1ms
000256 e1ec                                                  ldi             ZL, low(array_OLED_init_commands<<1)
000257 e0f5                                                  ldi             ZH, high(array_OLED_init_commands<<1)
                                     OLED_init_cmds:
000258 9115                                                  lpm             r17, Z+
000259 3f1f                                                  cpi             r17, 0xFF
00025a f011                                                  breq            OLED_init_end
00025b d002                                                  rcall           _OLED_write_command
00025c cffb                                                  rjmp            OLED_init_cmds
                                     OLED_init_end:
00025d 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: writes a command to one of the screen's registers.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r17: command
                                 ; --------------------------------------------------------------------------------
                                 _OLED_write_command:
00025e 982a                                                  cbi             PORTB, OLED_CS
00025f 9828                                                  cbi             PORTB, OLED_DC
000260 dfd3                                                  rcall           SPI_master_transmit
000261 9a2a                                                  sbi             PORTB, OLED_CS
000262 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: writes a byte of data to one of the screen's registers.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r17: data
                                 ; --------------------------------------------------------------------------------
                                 _OLED_write_data:
000263 982a                                                  cbi             PORTB, OLED_CS
000264 9a28                                                  sbi             PORTB, OLED_DC
000265 dfce                                                  rcall           SPI_master_transmit
000266 9a2a                                                  sbi             PORTB, OLED_CS
000267 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sets target x-y location on OLED.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r18: pixel grid x position [subroutine does not change]
                                 ;   - r19: pixel grid y position [subroutine does not change]
                                 ; (this may be deprecateed)
                                 ; --------------------------------------------------------------------------------
                                 _OLED_set_screen_loc:
000268 d009                                                  rcall           _OLED_set_page
000269 d001                                                  rcall           _OLED_set_col
00026a 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sets target column.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r18: pixel grid x position [subroutine does not change]
                                 ; (this may be deprecateed)
                                 ; --------------------------------------------------------------------------------
                                 _OLED_set_col:               
00026b e211                                                  ldi             r17, 0x21
00026c dff1                                                  rcall           _OLED_write_command
00026d 2f12                                                  mov             r17, r18
00026e dfef                                                  rcall           _OLED_write_command
00026f e71f                                                  ldi             r17, WIDTH-1
000270 dfed                                                  rcall           _OLED_write_command
000271 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sets target page.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r17: command
                                 ;   - r19: pixel grid y position [subroutine does not change]
                                 ; (this may be deprecateed)
                                 ; --------------------------------------------------------------------------------
                                 _OLED_set_page:
000272 e212                                                  ldi             r17, 0x22
000273 dfea                                                  rcall           _OLED_write_command
000274 9536                                                  lsr             r19
000275 9536                                                  lsr             r19
000276 9536                                                  lsr             r19
000277 2f13                                                  mov             r17, r19
000278 dfe5                                                  rcall           _OLED_write_command
000279 e017                                                  ldi             r17, (HEIGHT-1)/8
00027a dfe3                                                  rcall           _OLED_write_command
00027b 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: writes the entire pix array from dmem to OLED.
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - X pointer: set to start of array location
                                 ; --------------------------------------------------------------------------------
                                 OLED_refresh_screen:
00027c 932f                                                  push            r18
00027d 933f                                                  push            r19
00027e 2722                                                  clr             r18
00027f 2733                                                  clr             r19
                                     OLED_refresh_screen_col:                                                        ; for each col
000280 3038                                                  cpi             r19, HEIGHT/8
000281 f448                                                  brcc            OLED_refresh_screen_done
                                         OLED_refresh_screen_row:                                                    ; for each row
000282 3820                                                  cpi             r18, WIDTH
000283 f420                                                  brcc            OLED_refresh_screen_nr
000284 911d                                                  ld              r17, X+
000285 dfdd                                                  rcall           _OLED_write_data
000286 9523                                                  inc             r18
000287 cffa                                                  rjmp            OLED_refresh_screen_row
                                             OLED_refresh_screen_nr:                                                 ; move to next row
000288 2722                                                  clr             r18
000289 9533                                                  inc             r19
00028a cff5                                                  rjmp            OLED_refresh_screen_col
                                     OLED_refresh_screen_done:                                                       ; done drawing array
00028b 913f                                                  pop             r19
00028c 912f                                                  pop             r18
00028d 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: initialisation sequence for screen.
                                 ; Nicked from https://github.com/adafruit/Adafruit_SSD1306/blob/master/Adafruit_SSD1306.cpp
                                 ; (Starts on line 543.)
                                 ; Comments below are on separate lines because Atmel Studio doesn't like inline comments on continued lines.
                                 ; --------------------------------------------------------------------------------
                                 array_OLED_init_commands:   .db         0xAE, \
00028e d5ae                                                              0xD5, 0x80, \
00028f a880                                                              0xA8, 0x3F, \
000290 d33f                                                              0xD3, 0x00, \
                                                                         0x40, \
000291 4000                                                              0x8D, 0x14, \
000292 148d                                                              0x20, 0x00, \
000293 0020                                                              0xA1, \
                                                                         0xC8, \
000294 c8a1                                                              0xDA, 0x12, \
000295 12da                                                              0x81, 0xCF, \
000296 cf81                                                              0xD9, 0xF1, \
000297 f1d9                                                              0xDB, 0x40, \
000298 40db                                                              0xA4, \
                                                                         0xA6, \
000299 a6a4                                                              0x2E, \
                                                                         0xAF, \
00029a af2e
00029b ffff                                                              0xFF, 0xFF
                                 
                                                                         ; set disp (off),
                                                                         ; set disp clock div rat/osc freq
                                                                         ; set mux ratio
                                                                         ; set disp offset
                                                                         ; set disp start line (0)
                                                                         ; enable charge pump reg
                                                                         ; set mem addr mode - horiz
                                                                         ; set seg remap (remapped)
                                                                         ; set COM out scan dir (remapped)
                                                                         ; set com pins hw config
                                                                         ; set contrast ctrl
                                                                         ; set prechrg per
                                                                         ; set Vcom reg out
                                                                         ; entire disp (on)
                                                                         ; set inverse/normal (norm)
                                                                         ; deactivate scroll (deactivate)
                                                                         ; set disp (on)
                                                                         ; END COMMAND SET (my marker)
                                 
                                 ; --------------------------------------------------------------------------------
                                 .include	"lib_GFX.asm"
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; lib_GFX
                                 ; Description: controls higher-level functionaity for OLED screens.
                                 ; Dependencies:
                                 ;   - HEIGHT .equ (the height of the OLED screen), assigned in main.asm
                                 ;   - WIDTH .equ (the width of the OLED screen), assigned in main.asm
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: reserved space in data memory for pixel array (full screen) and.
                                 ;              sprite array (one 8pixel x 8pixel character)
                                 ; --------------------------------------------------------------------------------
                                 .dseg
000100                           sprite:                     .byte           8                                       ; 8x8 pixel shape used to store sprite
000108                           pixel_array:                .byte           HEIGHT*WIDTH/8                          ; datamem array that is written to screen
                                 .cseg                                                                               ; return to code segment
                                 .include                    "character_map.asm"                                       ; table of ascii pixel char arrays
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; character_map.asm
                                 ; Font: Standard.pf
                                 ; tool to generate this file from https://www.min.at/prinz/o/software/pixelfont/
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
00029c 0000
00029d 0000
00029e 0000
00029f 0000                      Char_000:                   .db             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  ; space
0002a0 817e
0002a1 b195
0002a2 95b1
0002a3 7e81                      Char_001:                   .db             0x7E, 0x81, 0x95, 0xB1, 0xB1, 0x95, 0x81, 0x7E  ; smileyface
0002a4 ff7e
0002a5 cfeb
0002a6 ebcf
0002a7 7eff                      Char_002:                   .db             0x7E, 0xFF, 0xEB, 0xCF, 0xCF, 0xEB, 0xFF, 0x7E  ; smileyface (inverted)
0002a8 1f0e
0002a9 7e3f
0002aa 1f3f
0002ab 000e                      Char_003:                   .db             0x0E, 0x1F, 0x3F, 0x7E, 0x3F, 0x1F, 0x0E, 0x00  ; hearts
0002ac 1c08
0002ad 7f3e
0002ae 1c3e
0002af 0008                      Char_004:                   .db             0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08, 0x00  ; diamonds
0002b0 1818
0002b1 6f5b
0002b2 5b6f
0002b3 1818                      Char_005:                   .db             0x18, 0x18, 0x5B, 0x6F, 0x6F, 0x5B, 0x18, 0x18  ; clubs
0002b4 1c18
0002b5 6f5e
0002b6 1c5e
0002b7 0018                      Char_006:                   .db             0x18, 0x1C, 0x5E, 0x6F, 0x5E, 0x1C, 0x18, 0x00  ; spades
0002b8 0000
0002b9 3c18
0002ba 183c
0002bb 0000                      Char_007:                   .db             0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00  ; circle, black
0002bc ffff
0002bd c3e7
0002be e7c3
0002bf ffff                      Char_008:                   .db             0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF  ; circle, black (inverted)
0002c0 3c00
0002c1 4266
0002c2 6642
0002c3 003c                      Char_009:                   .db             0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00  ; circle, white
0002c4 c3ff
0002c5 bd99
0002c6 99bd
0002c7 ffc3                      Char_010:                   .db             0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF  ; circle, white (inverted)
0002c8 f870
0002c9 8888
0002ca 7ffd
0002cb 0f07                      Char_011:                   .db             0x70, 0xF8, 0x88, 0x88, 0xFD, 0x7F, 0x07, 0x0F  ; male symbol
0002cc 4e00
0002cd f15f
0002ce 5ff1
0002cf 004e                      Char_012:                   .db             0x00, 0x4E, 0x5F, 0xF1, 0xF1, 0x5F, 0x4E, 0x00  ; female symbol
0002d0 6040
0002d1 6060
0002d2 023f
0002d3 000c                      Char_013:                   .db             0x40, 0x60, 0x60, 0x60, 0x3F, 0x02, 0x0C, 0x00  ; eighth note
0002d4 3020
0002d5 9f30
0002d6 cac5
0002d7 007c                      Char_014:                   .db             0x20, 0x30, 0x30, 0x9F, 0xC5, 0xCA, 0x7C, 0x00  ; double sixteenth note
0002d8 2a08
0002d9 771c
0002da 2a1c
0002db 0008                      Char_015:                   .db             0x08, 0x2A, 0x1C, 0x77, 0x1C, 0x2A, 0x08, 0x00  ; asterisk
0002dc 3e7f
0002dd 1c3e
0002de 081c
0002df 0008                      Char_016:                   .db             0x7F, 0x3E, 0x3E, 0x1C, 0x1C, 0x08, 0x08, 0x00  ; triangle, right
0002e0 0808
0002e1 1c1c
0002e2 3e3e
0002e3 007f                      Char_017:                   .db             0x08, 0x08, 0x1C, 0x1C, 0x3E, 0x3E, 0x7F, 0x00  ; triange, left
0002e4 1400
0002e5 7f22
0002e6 227f
0002e7 0014                      Char_018:                   .db             0x00, 0x14, 0x22, 0x7F, 0x7F, 0x22, 0x14, 0x00  ; arrow, up/down
0002e8 5f00
0002e9 005f
0002ea 5f00
0002eb 005f                      Char_019:                   .db             0x00, 0x5F, 0x5F, 0x00, 0x00, 0x5F, 0x5F, 0x00  ; double exclamation point
0002ec 1f0e
0002ed 7f11
0002ee 017f
0002ef 7f7f                      Char_020:                   .db             0x0E, 0x1F, 0x11, 0x7F, 0x7F, 0x01, 0x7F, 0x7F  ; pilcrow sign
0002f0 9840
0002f1 a5a6
0002f2 1965
0002f3 0002                      Char_021:                   .db             0x40, 0x98, 0xA6, 0xA5, 0x65, 0x19, 0x02, 0x00  ; section sign
0002f4 7000
0002f5 7070
0002f6 7070
0002f7 0070                      Char_022:                   .db             0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00  ; heavy low dash
0002f8 9400
0002f9 ffa2
0002fa a2ff
0002fb 0094                      Char_023:                   .db             0x00, 0x94, 0xA2, 0xFF, 0xFF, 0xA2, 0x94, 0x00  ; arrow, up/down with underscore
0002fc 0400
0002fd 7f02
0002fe 027f
0002ff 0004                      Char_024:                   .db             0x00, 0x04, 0x02, 0x7F, 0x7F, 0x02, 0x04, 0x00  ; arrow, up
000300 1000
000301 7f20
000302 207f
000303 0010                      Char_025:                   .db             0x00, 0x10, 0x20, 0x7F, 0x7F, 0x20, 0x10, 0x00  ; arrow, down
000304 0808
000305 2a08
000306 1c3e
000307 0008                      Char_026:                   .db             0x08, 0x08, 0x08, 0x2A, 0x3E, 0x1C, 0x08, 0x00  ; arrow, right
000308 1c08
000309 2a3e
00030a 0808
00030b 0008                      Char_027:                   .db             0x08, 0x1C, 0x3E, 0x2A, 0x08, 0x08, 0x08, 0x00  ; arrow, left
00030c 3c3c
00030d 2020
00030e 2020
00030f 0020                      Char_028:                   .db             0x3C, 0x3C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00  ; righthand interior product
000310 1c08
000311 082a
000312 2a08
000313 081c                      Char_029:                   .db             0x08, 0x1C, 0x2A, 0x08, 0x08, 0x2A, 0x1C, 0x08  ; arrow, left/right
000314 3830
000315 3e3c
000316 383c
000317 0030                      Char_030:                   .db             0x30, 0x38, 0x3C, 0x3E, 0x3C, 0x38, 0x30, 0x00  ; triangle, up
000318 0e06
000319 3e1e
00031a 0e1e
00031b 0006                      Char_031:                   .db             0x06, 0x0E, 0x1E, 0x3E, 0x1E, 0x0E, 0x06, 0x00  ; triangle, down
00031c 0000
00031d 0000
00031e 0000
00031f 0000                      Char_032:                   .db             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  ; space
000320 0000
000321 5f06
000322 065f
000323 0000                      Char_033:                   .db             0x00, 0x00, 0x06, 0x5F, 0x5F, 0x06, 0x00, 0x00  ; !
000324 0100
000325 0007
000326 0701
000327 0000                      Char_034:                   .db             0x00, 0x01, 0x07, 0x00, 0x01, 0x07, 0x00, 0x00  ; "
000328 7f14
000329 147f
00032a 7f7f
00032b 0014                      Char_035:                   .db             0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14, 0x00  ; #
00032c 2e24
00032d 7f2a
00032e 3a2a
00032f 0010                      Char_036:                   .db             0x24, 0x2E, 0x2A, 0x7F, 0x2A, 0x3A, 0x10, 0x00  ; $
000330 6a4c
000331 1836
000332 566c
000333 0032                      Char_037:                   .db             0x4C, 0x6A, 0x36, 0x18, 0x6C, 0x56, 0x32, 0x00  ; %
000334 7a30
000335 4d4d
000336 327f
000337 0050                      Char_038:                   .db             0x30, 0x7A, 0x4D, 0x4D, 0x7F, 0x32, 0x50, 0x00  ; &
000338 0000
000339 0305
00033a 0000
00033b 0000                      Char_039:                   .db             0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00  ; '
00033c 1c00
00033d 633e
00033e 0041
00033f 0000                      Char_040:                   .db             0x00, 0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00  ; (
000340 4100
000341 3e63
000342 001c
000343 0000                      Char_041:                   .db             0x00, 0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00  ; )
000344 2a08
000345 1c3e
000346 3e1c
000347 082a                      Char_042:                   .db             0x08, 0x2A, 0x3E, 0x1C, 0x1C, 0x3E, 0x2A, 0x08  ; *
000348 0808
000349 3e3e
00034a 0808
00034b 0000                      Char_043:                   .db             0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00, 0x00  ; +
00034c 0000
00034d 60a0
00034e 0000
00034f 0000                      Char_044:                   .db             0x00, 0x00, 0xA0, 0x60, 0x00, 0x00, 0x00, 0x00  ; ,
000350 0808
000351 0808
000352 0808
000353 0000                      Char_045:                   .db             0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00  ; -
000354 0000
000355 4040
000356 0000
000357 0000                      Char_046:                   .db             0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00  ; .
000358 6040
000359 1830
00035a 060c
00035b 0003                      Char_047:                   .db             0x40, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x00  ; /
00035c 7f3e
00035d 4d79
00035e 7f47
00035f 003e                      Char_048:                   .db             0x3E, 0x7F, 0x79, 0x4D, 0x47, 0x7F, 0x3E, 0x00  ; 0
000360 4400
000361 7f46
000362 407f
000363 0040                      Char_049:                   .db             0x00, 0x44, 0x46, 0x7F, 0x7F, 0x40, 0x40, 0x00  ; 1
000364 7362
000365 5951
000366 6f49
000367 0066                      Char_050:                   .db             0x62, 0x73, 0x51, 0x59, 0x49, 0x6F, 0x66, 0x00  ; 2
000368 6322
000369 4949
00036a 7f49
00036b 0036                      Char_051:                   .db             0x22, 0x63, 0x49, 0x49, 0x49, 0x7F, 0x36, 0x00  ; 3
00036c 1c18
00036d 5316
00036e 7f7f
00036f 0050                      Char_052:                   .db             0x18, 0x1C, 0x16, 0x53, 0x7F, 0x7F, 0x50, 0x00  ; 4
000370 6727
000371 4545
000372 7d45
000373 0039                      Char_053:                   .db             0x27, 0x67, 0x45, 0x45, 0x45, 0x7D, 0x39, 0x00  ; 5
000374 7f3e
000375 4949
000376 7b49
000377 0032                      Char_054:                   .db             0x3E, 0x7F, 0x49, 0x49, 0x49, 0x7B, 0x32, 0x00  ; 6
000378 0303
000379 7971
00037a 070d
00037b 0003                      Char_055:                   .db             0x03, 0x03, 0x71, 0x79, 0x0D, 0x07, 0x03, 0x00  ; 7
00037c 7f36
00037d 4949
00037e 7f49
00037f 0036                      Char_056:                   .db             0x36, 0x7F, 0x49, 0x49, 0x49, 0x7F, 0x36, 0x00  ; 8
000380 6f26
000381 4949
000382 7f49
000383 003e                      Char_057:                   .db             0x26, 0x6F, 0x49, 0x49, 0x49, 0x7F, 0x3E, 0x00  ; 9
000384 0000
000385 2222
000386 0000
000387 0000                      Char_058:                   .db             0x00, 0x00, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00  ; :
000388 0000
000389 62a2
00038a 0000
00038b 0000                      Char_059:                   .db             0x00, 0x00, 0xA2, 0x62, 0x00, 0x00, 0x00, 0x00  ; ;
00038c 0800
00038d 361c
00038e 4163
00038f 0000                      Char_060:                   .db             0x00, 0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00  ; <
000390 2400
000391 2424
000392 2424
000393 0024                      Char_061:                   .db             0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00  ; =
000394 4100
000395 3663
000396 081c
000397 0000                      Char_062:                   .db             0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00  ; >
000398 0302
000399 5951
00039a 060f
00039b 0000                      Char_063:                   .db             0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00, 0x00  ; ?
00039c 413e
00039d 5549
00039e 5d55
00039f 001e                      Char_064:                   .db             0x3E, 0x41, 0x49, 0x55, 0x55, 0x5D, 0x1E, 0x00  ; @
0003a0 7f7e
0003a1 0909
0003a2 7f09
0003a3 007e                      Char_065:                   .db             0x7E, 0x7F, 0x09, 0x09, 0x09, 0x7F, 0x7E, 0x00  ; A
0003a4 7f41
0003a5 497f
0003a6 7f49
0003a7 0036                      Char_066:                   .db             0x41, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00  ; B
0003a8 7f3e
0003a9 4141
0003aa 6341
0003ab 0022                      Char_067:                   .db             0x3E, 0x7F, 0x41, 0x41, 0x41, 0x63, 0x22, 0x00  ; C
0003ac 7f41
0003ad 417f
0003ae 7f41
0003af 003e                      Char_068:                   .db             0x41, 0x7F, 0x7F, 0x41, 0x41, 0x7F, 0x3E, 0x00  ; D
0003b0 7f41
0003b1 497f
0003b2 415d
0003b3 0063                      Char_069:                   .db             0x41, 0x7F, 0x7F, 0x49, 0x5D, 0x41, 0x63, 0x00  ; E
0003b4 7f41
0003b5 497f
0003b6 011d
0003b7 0003                      Char_070:                   .db             0x41, 0x7F, 0x7F, 0x49, 0x1D, 0x01, 0x03, 0x00  ; F
0003b8 7f3e
0003b9 4141
0003ba 7751
0003bb 0076                      Char_071:                   .db             0x3E, 0x7F, 0x41, 0x41, 0x51, 0x77, 0x76, 0x00  ; G
0003bc 7f7f
0003bd 0808
0003be 7f08
0003bf 007f                      Char_072:                   .db             0x7F, 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x7F, 0x00  ; H
0003c0 0000
0003c1 7f41
0003c2 417f
0003c3 0000                      Char_073:                   .db             0x00, 0x00, 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00  ; I
0003c4 7030
0003c5 4140
0003c6 3f7f
0003c7 0001                      Char_074:                   .db             0x30, 0x70, 0x40, 0x41, 0x7F, 0x3F, 0x01, 0x00  ; J
0003c8 7f41
0003c9 087f
0003ca 771c
0003cb 0063                      Char_075:                   .db             0x41, 0x7F, 0x7F, 0x08, 0x1C, 0x77, 0x63, 0x00  ; K
0003cc 7f41
0003cd 417f
0003ce 6040
0003cf 0070                      Char_076:                   .db             0x41, 0x7F, 0x7F, 0x41, 0x40, 0x60, 0x70, 0x00  ; L
0003d0 7e7f
0003d1 180c
0003d2 7e0c
0003d3 007f                      Char_077:                   .db             0x7F, 0x7E, 0x0C, 0x18, 0x0C, 0x7E, 0x7F, 0x00  ; M
0003d4 7f7f
0003d5 0c06
0003d6 7f18
0003d7 007f                      Char_078:                   .db             0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00  ; N
0003d8 7f3e
0003d9 4141
0003da 7f41
0003db 003e                      Char_079:                   .db             0x3E, 0x7F, 0x41, 0x41, 0x41, 0x7F, 0x3E, 0x00  ; O
0003dc 7f41
0003dd 497f
0003de 0f09
0003df 0006                      Char_080:                   .db             0x41, 0x7F, 0x7F, 0x49, 0x09, 0x0F, 0x06, 0x00  ; P
0003e0 7f3e
0003e1 7141
0003e2 ff61
0003e3 00be                      Char_081:                   .db             0x3E, 0x7F, 0x41, 0x71, 0x61, 0xFF, 0xBE, 0x00  ; Q
0003e4 7f41
0003e5 097f
0003e6 7f09
0003e7 0076                      Char_082:                   .db             0x41, 0x7F, 0x7F, 0x09, 0x09, 0x7F, 0x76, 0x00  ; R
0003e8 6f26
0003e9 4949
0003ea 7b49
0003eb 0032                      Char_083:                   .db             0x26, 0x6F, 0x49, 0x49, 0x49, 0x7B, 0x32, 0x00  ; S
0003ec 0700
0003ed 7f41
0003ee 417f
0003ef 0007                      Char_084:                   .db             0x00, 0x07, 0x41, 0x7F, 0x7F, 0x41, 0x07, 0x00  ; T
0003f0 7f3f
0003f1 4040
0003f2 7f40
0003f3 003f                      Char_085:                   .db             0x3F, 0x7F, 0x40, 0x40, 0x40, 0x7F, 0x3F, 0x00  ; U
0003f4 1f0f
0003f5 6030
0003f6 1f30
0003f7 000f                      Char_086:                   .db             0x0F, 0x1F, 0x30, 0x60, 0x30, 0x1F, 0x0F, 0x00  ; V
0003f8 3f7f
0003f9 0c18
0003fa 3f18
0003fb 007f                      Char_087:                   .db             0x7F, 0x3F, 0x18, 0x0C, 0x18, 0x3F, 0x7F, 0x00  ; W
0003fc 6341
0003fd 1c3e
0003fe 633e
0003ff 0041                      Char_088:                   .db             0x41, 0x63, 0x3E, 0x1C, 0x3E, 0x63, 0x41, 0x00  ; X
000400 0700
000401 784f
000402 4f78
000403 0007                      Char_089:                   .db             0x00, 0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07, 0x00  ; Y
000404 6347
000405 5971
000406 674d
000407 0073                      Char_090:                   .db             0x47, 0x63, 0x71, 0x59, 0x4D, 0x67, 0x73, 0x00  ; Z
000408 7f00
000409 417f
00040a 0041
00040b 0000                      Char_091:                   .db             0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00  ; [
00040c 0301
00040d 0c06
00040e 3018
00040f 0060                      Char_092:                   .db             0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00  ; \
000410 4100
000411 7f41
000412 007f
000413 0000                      Char_093:                   .db             0x00, 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00  ; ]
000414 0c08
000415 0306
000416 0c06
000417 0008                      Char_094:                   .db             0x08, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x08, 0x00  ; ^
000418 8080
000419 8080
00041a 8080
00041b 8080                      Char_095:                   .db             0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80  ; _
00041c 0000
00041d 0503
00041e 0000
00041f 0000                      Char_096:                   .db             0x00, 0x00, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00  ; `
000420 7420
000421 5454
000422 783c
000423 0040                      Char_097:                   .db             0x20, 0x74, 0x54, 0x54, 0x3C, 0x78, 0x40, 0x00  ; a
000424 7f01
000425 487f
000426 7848
000427 0030                      Char_098:                   .db             0x01, 0x7F, 0x7F, 0x48, 0x48, 0x78, 0x30, 0x00  ; b
000428 7c38
000429 4444
00042a 6c44
00042b 0028                      Char_099:                   .db             0x38, 0x7C, 0x44, 0x44, 0x44, 0x6C, 0x28, 0x00  ; c
00042c 7830
00042d 4948
00042e 7f3f
00042f 0040                      Char_100:                   .db             0x30, 0x78, 0x48, 0x49, 0x3F, 0x7F, 0x40, 0x00  ; d
000430 7c38
000431 5454
000432 5c54
000433 0018                      Char_101:                   .db             0x38, 0x7C, 0x54, 0x54, 0x54, 0x5C, 0x18, 0x00  ; e
000434 4800
000435 7f7e
000436 0349
000437 0002                      Char_102:                   .db             0x00, 0x48, 0x7E, 0x7F, 0x49, 0x03, 0x02, 0x00  ; f
000438 bc18
000439 a4a4
00043a 7cf8
00043b 0004                      Char_103:                   .db             0x18, 0xBC, 0xA4, 0xA4, 0xF8, 0x7C, 0x04, 0x00  ; g
00043c 7f41
00043d 087f
00043e 7c04
00043f 0078                      Char_104:                   .db             0x41, 0x7F, 0x7F, 0x08, 0x04, 0x7C, 0x78, 0x00  ; h
000440 0000
000441 7d44
000442 407d
000443 0000                      Char_105:                   .db             0x00, 0x00, 0x44, 0x7D, 0x7D, 0x40, 0x00, 0x00  ; i
000444 c040
000445 8880
000446 7afa
000447 0000                      Char_106:                   .db             0x40, 0xC0, 0x80, 0x88, 0xFA, 0x7A, 0x00, 0x00  ; j
000448 7f41
000449 107f
00044a 6c38
00044b 0044                      Char_107:                   .db             0x41, 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00  ; k
00044c 0000
00044d 7f41
00044e 407f
00044f 0000                      Char_108:                   .db             0x00, 0x00, 0x41, 0x7F, 0x7F, 0x40, 0x00, 0x00  ; l
000450 7c7c
000451 7808
000452 7c0c
000453 0078                      Char_109:                   .db             0x7C, 0x7C, 0x08, 0x78, 0x0C, 0x7C, 0x78, 0x00  ; m
000454 7c04
000455 0478
000456 7c04
000457 0078                      Char_110:                   .db             0x04, 0x7C, 0x78, 0x04, 0x04, 0x7C, 0x78, 0x00  ; n
000458 7c38
000459 4444
00045a 7c44
00045b 0038                      Char_111:                   .db             0x38, 0x7C, 0x44, 0x44, 0x44, 0x7C, 0x38, 0x00  ; o
00045c fc84
00045d a4f8
00045e 3c24
00045f 0018                      Char_112:                   .db             0x84, 0xFC, 0xF8, 0xA4, 0x24, 0x3C, 0x18, 0x00  ; p
000460 3c18
000461 a424
000462 fcfc
000463 0080                      Char_113:                   .db             0x18, 0x3C, 0x24, 0xA4, 0xFC, 0xFC, 0x80, 0x00  ; q
000464 7c44
000465 4c78
000466 0c04
000467 000c                      Char_114:                   .db             0x44, 0x7C, 0x78, 0x4C, 0x04, 0x0C, 0x0C, 0x00  ; r
000468 5c08
000469 5454
00046a 7454
00046b 0020                      Char_115:                   .db             0x08, 0x5C, 0x54, 0x54, 0x54, 0x74, 0x20, 0x00  ; s
00046c 0404
00046d 7f3e
00046e 2444
00046f 0000                      Char_116:                   .db             0x04, 0x04, 0x3E, 0x7F, 0x44, 0x24, 0x00, 0x00  ; t
000470 7c3c
000471 4040
000472 7c3c
000473 0040                      Char_117:                   .db             0x3C, 0x7C, 0x40, 0x40, 0x3C, 0x7C, 0x40, 0x00  ; u
000474 1c0c
000475 6030
000476 1c30
000477 000c                      Char_118:                   .db             0x0C, 0x1C, 0x30, 0x60, 0x30, 0x1C, 0x0C, 0x00  ; v
000478 7c3c
000479 3860
00047a 7c60
00047b 003c                      Char_119:                   .db             0x3C, 0x7C, 0x60, 0x38, 0x60, 0x7C, 0x3C, 0x00  ; w
00047c 6c44
00047d 1038
00047e 6c38
00047f 0044                      Char_120:                   .db             0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00  ; x
000480 bc9c
000481 a0a0
000482 7cfc
000483 0000                      Char_121:                   .db             0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00, 0x00  ; y
000484 644c
000485 5c74
000486 644c
000487 0000                      Char_122:                   .db             0x4C, 0x64, 0x74, 0x5C, 0x4C, 0x64, 0x00, 0x00  ; z
000488 0000
000489 3e08
00048a 4177
00048b 0041                      Char_123:                   .db             0x00, 0x00, 0x08, 0x3E, 0x77, 0x41, 0x41, 0x00  ; {
00048c 0000
00048d 7700
00048e 0077
00048f 0000                      Char_124:                   .db             0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x00  ; |
000490 4141
000491 3e77
000492 0008
000493 0000                      Char_125:                   .db             0x41, 0x41, 0x77, 0x3E, 0x08, 0x00, 0x00, 0x00  ; }
000494 0302
000495 0301
000496 0302
000497 0001                      Char_126:                   .db             0x02, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01, 0x00  ; ~
000498 7870
000499 464c
00049a 784c
00049b 0070                      Char_127:                   .db             0x70, 0x78, 0x4C, 0x46, 0x4C, 0x78, 0x70, 0x00  ; Delta
00049c bf1e
00049d e1a1
00049e 3361
00049f 0012                      Char_128:                   .db             0x1E, 0xBF, 0xA1, 0xE1, 0x61, 0x33, 0x12, 0x00  ; C with cedilla
0004a0 7d3d
0004a1 4040
0004a2 7d3d
0004a3 0040                      Char_129:                   .db             0x3D, 0x7D, 0x40, 0x40, 0x3D, 0x7D, 0x40, 0x00  ; u with diaeresis
0004a4 7c38
0004a5 5654
0004a6 5d55
0004a7 0019                      Char_130:                   .db             0x38, 0x7C, 0x54, 0x56, 0x55, 0x5D, 0x19, 0x00  ; e with acute
0004a8 7122
0004a9 5555
0004aa 793d
0004ab 0042                      Char_131:                   .db             0x22, 0x71, 0x55, 0x55, 0x3D, 0x79, 0x42, 0x00  ; a with circumflex
0004ac 7521
0004ad 5454
0004ae 793d
0004af 0040                      Char_132:                   .db             0x21, 0x75, 0x54, 0x54, 0x3D, 0x79, 0x40, 0x00  ; a with diaeresis
0004b0 7521
0004b1 5655
0004b2 783c
0004b3 0040                      Char_133:                   .db             0x21, 0x75, 0x55, 0x56, 0x3C, 0x78, 0x40, 0x00  ; a with grave
0004b4 7420
0004b5 5757
0004b6 783c
0004b7 0040                      Char_134:                   .db             0x20, 0x74, 0x57, 0x57, 0x3C, 0x78, 0x40, 0x00  ; a with ring
0004b8 bc18
0004b9 e4a4
0004ba 2464
0004bb 0000                      Char_135:                   .db             0x18, 0xBC, 0xA4, 0xE4, 0x64, 0x24, 0x00, 0x00  ; c with cedilla
0004bc 7d3a
0004bd 5555
0004be 5d55
0004bf 001a                      Char_136:                   .db             0x3A, 0x7D, 0x55, 0x55, 0x55, 0x5D, 0x1A, 0x00  ; e with circumflex
0004c0 7d39
0004c1 5454
0004c2 5d54
0004c3 0019                      Char_137:                   .db             0x39, 0x7D, 0x54, 0x54, 0x54, 0x5D, 0x19, 0x00  ; e with diaeresis
0004c4 7d39
0004c5 5655
0004c6 5c54
0004c7 0018                      Char_138:                   .db             0x39, 0x7D, 0x55, 0x56, 0x54, 0x5C, 0x18, 0x00  ; e with grave
0004c8 0100
0004c9 7c45
0004ca 417c
0004cb 0001                      Char_139:                   .db             0x00, 0x01, 0x45, 0x7C, 0x7C, 0x41, 0x01, 0x00  ; i with diaeresis
0004cc 0102
0004cd 7d45
0004ce 417d
0004cf 0002                      Char_140:                   .db             0x02, 0x01, 0x45, 0x7D, 0x7D, 0x41, 0x02, 0x00  ; i with circumflex
0004d0 0101
0004d1 7e45
0004d2 407c
0004d3 0000                      Char_141:                   .db             0x01, 0x01, 0x45, 0x7E, 0x7C, 0x40, 0x00, 0x00  ; i with grave
0004d4 7d79
0004d5 1414
0004d6 7d14
0004d7 0079                      Char_142:                   .db             0x79, 0x7D, 0x14, 0x14, 0x14, 0x7D, 0x79, 0x00  ; A with diaeresis
0004d8 7c78
0004d9 1717
0004da 7c17
0004db 0078                      Char_143:                   .db             0x78, 0x7C, 0x17, 0x17, 0x17, 0x7C, 0x78, 0x00  ; A with ring
0004dc 7c44
0004dd 567c
0004de 4555
0004df 0045                      Char_144:                   .db             0x44, 0x7C, 0x7C, 0x56, 0x55, 0x45, 0x45, 0x00  ; E with grave
0004e0 7420
0004e1 7c54
0004e2 5454
0004e3 0058                      Char_145:                   .db             0x20, 0x74, 0x54, 0x7C, 0x54, 0x54, 0x58, 0x00  ; ae
0004e4 7f7e
0004e5 0909
0004e6 497f
0004e7 0049                      Char_146:                   .db             0x7E, 0x7F, 0x09, 0x09, 0x7F, 0x49, 0x49, 0x00  ; AE
0004e8 7d3a
0004e9 4545
0004ea 7d45
0004eb 003a                      Char_147:                   .db             0x3A, 0x7D, 0x45, 0x45, 0x45, 0x7D, 0x3A, 0x00  ; o with circumflex
0004ec 7d39
0004ed 4444
0004ee 7d44
0004ef 0039                      Char_148:                   .db             0x39, 0x7D, 0x44, 0x44, 0x44, 0x7D, 0x39, 0x00  ; o with diaeresis
0004f0 7d39
0004f1 4645
0004f2 7c44
0004f3 0038                      Char_149:                   .db             0x39, 0x7D, 0x45, 0x46, 0x44, 0x7C, 0x38, 0x00  ; o with grave
0004f4 7d3e
0004f5 4141
0004f6 7d3d
0004f7 0042                      Char_150:                   .db             0x3E, 0x7D, 0x41, 0x41, 0x3D, 0x7D, 0x42, 0x00  ; u with circumflex
0004f8 7d3d
0004f9 4241
0004fa 7c3c
0004fb 0040                      Char_151:                   .db             0x3D, 0x7D, 0x41, 0x42, 0x3C, 0x7C, 0x40, 0x00  ; u with grave
0004fc bd9d
0004fd a0a0
0004fe 7dfd
0004ff 0000                      Char_152:                   .db             0x9D, 0xBD, 0xA0, 0xA0, 0xFD, 0x7D, 0x00, 0x00  ; y with diaeresis
000500 7f3d
000501 4242
000502 7f42
000503 003d                      Char_153:                   .db             0x3D, 0x7F, 0x42, 0x42, 0x42, 0x7F, 0x3D, 0x00  ; O with diaeresis
000504 7d3d
000505 4040
000506 7d40
000507 003d                      Char_154:                   .db             0x3D, 0x7D, 0x40, 0x40, 0x40, 0x7D, 0x3D, 0x00  ; U with diaeresis
000508 3e1c
000509 7f22
00050a 3663
00050b 0014                      Char_155:                   .db             0x1C, 0x3E, 0x22, 0x7F, 0x63, 0x36, 0x14, 0x00  ; cent sign
00050c 7e68
00050d 693f
00050e 4243
00050f 0020                      Char_156:                   .db             0x68, 0x7E, 0x3F, 0x69, 0x43, 0x42, 0x20, 0x00  ; pound sign
000510 2900
000511 7e2b
000512 2b7e
000513 0029                      Char_157:                   .db             0x00, 0x29, 0x2B, 0x7E, 0x7E, 0x2B, 0x29, 0x00  ; yen sign
000514 7f7f
000515 2505
000516 fa77
000517 00a0                      Char_158:                   .db             0x7F, 0x7F, 0x05, 0x25, 0x77, 0xFA, 0xA0, 0x00  ; P sub t
000518 c040
000519 fe88
00051a 097f
00051b 0203                      Char_159:                   .db             0x40, 0xC0, 0x88, 0xFE, 0x7F, 0x09, 0x03, 0x02  ; function
00051c 7420
00051d 5654
00051e 793d
00051f 0041                      Char_160:                   .db             0x20, 0x74, 0x54, 0x56, 0x3D, 0x79, 0x41, 0x00  ; a with acute
000520 0000
000521 7e44
000522 417d
000523 0001                      Char_161:                   .db             0x00, 0x00, 0x44, 0x7E, 0x7D, 0x41, 0x01, 0x00  ; i with acute
000524 7c38
000525 4644
000526 7d45
000527 0039                      Char_162:                   .db             0x38, 0x7C, 0x44, 0x46, 0x45, 0x7D, 0x39, 0x00  ; o with acute
000528 7c3c
000529 4240
00052a 7d3d
00052b 0041                      Char_163:                   .db             0x3C, 0x7C, 0x40, 0x42, 0x3D, 0x7D, 0x41, 0x00  ; u with acute
00052c 7d06
00052d 0679
00052e 7d06
00052f 0079                      Char_164:                   .db             0x06, 0x7D, 0x79, 0x06, 0x06, 0x7D, 0x79, 0x00  ; n with tilde
000530 7d7e
000531 1a0d
000532 7d32
000533 007d                      Char_165:                   .db             0x7E, 0x7D, 0x0D, 0x1A, 0x32, 0x7D, 0x7D, 0x00  ; N with tilde
000534 2000
000535 2d2d
000536 2e27
000537 0020                      Char_166:                   .db             0x00, 0x20, 0x2D, 0x2D, 0x27, 0x2E, 0x20, 0x00  ; a superscript, underlined
000538 2600
000539 292f
00053a 262f
00053b 0000                      Char_167:                   .db             0x00, 0x26, 0x2F, 0x29, 0x2F, 0x26, 0x00, 0x00  ; o superscript, underlined
00053c 7830
00053d 454d
00053e 7040
00053f 0030                      Char_168:                   .db             0x30, 0x78, 0x4D, 0x45, 0x40, 0x70, 0x30, 0x00  ; ? (upside down)
000540 3838
000541 0808
000542 0808
000543 0000                      Char_169:                   .db             0x38, 0x38, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00  ; logic negation, reversed
000544 0808
000545 0808
000546 3838
000547 0000                      Char_170:                   .db             0x08, 0x08, 0x08, 0x08, 0x38, 0x38, 0x00, 0x00  ; logic negation
000548 1f2f
000549 4c08
00054a 786a
00054b 0058                      Char_171:                   .db             0x2F, 0x1F, 0x08, 0x4C, 0x6A, 0x78, 0x58, 0x00  ; 1/2
00054c 1f2f
00054d 3428
00054e 787a
00054f 0020                      Char_172:                   .db             0x2F, 0x1F, 0x28, 0x34, 0x7A, 0x78, 0x20, 0x00  ; 1/4
000550 0000
000551 7d30
000552 307d
000553 0000                      Char_173:                   .db             0x00, 0x00, 0x30, 0x7D, 0x7D, 0x30, 0x00, 0x00  ; ! (upside down)
000554 1c08
000555 2a36
000556 361c
000557 0022                      Char_174:                   .db             0x08, 0x1C, 0x36, 0x2A, 0x1C, 0x36, 0x22, 0x00  ; double less than
000558 3622
000559 2a1c
00055a 1c36
00055b 0008                      Char_175:                   .db             0x22, 0x36, 0x1C, 0x2A, 0x36, 0x1C, 0x08, 0x00  ; double greater than
00055c 00aa
00055d 0055
00055e 00aa
00055f 0055                      Char_176:                   .db             0xAA, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x55, 0x00  ; gradient, light
000560 55aa
000561 55aa
000562 55aa
000563 55aa                      Char_177:                   .db             0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55  ; gradient, medium
000564 ffdd
000565 77aa
000566 aadd
000567 77ff                      Char_178:                   .db             0xDD, 0xFF, 0xAA, 0x77, 0xDD, 0xAA, 0xFF, 0x77  ; gradient, heavy
000568 0000
000569 ff00
00056a 00ff
00056b 0000                      Char_179:                   .db             0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00  ; line, vertical single
00056c 1010
00056d ff10
00056e 00ff
00056f 0000                      Char_180:                   .db             0x10, 0x10, 0x10, 0xFF, 0xFF, 0x00, 0x00, 0x00  ; line, vertical single left single 
000570 1414
000571 ff14
000572 00ff
000573 0000                      Char_181:                   .db             0x14, 0x14, 0x14, 0xFF, 0xFF, 0x00, 0x00, 0x00  ; line, vertical single left double
000574 1010
000575 ffff
000576 ff00
000577 00ff                      Char_182:                   .db             0x10, 0x10, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00  ; line, vertical double left single
000578 1010
000579 f0f0
00057a f010
00057b 00f0                      Char_183:                   .db             0x10, 0x10, 0xF0, 0xF0, 0x10, 0xF0, 0xF0, 0x00  ; line, left single down double
00057c 1414
00057d fc14
00057e 00fc
00057f 0000                      Char_184:                   .db             0x14, 0x14, 0x14, 0xFC, 0xFC, 0x00, 0x00, 0x00  ; line, left double down single
000580 1414
000581 f7f7
000582 ff00
000583 00ff                      Char_185:                   .db             0x14, 0x14, 0xF7, 0xF7, 0x00, 0xFF, 0xFF, 0x00  ; line, vertical double left double
000584 0000
000585 ffff
000586 ff00
000587 00ff                      Char_186:                   .db             0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00  ; line, vertical double
000588 1414
000589 f4f4
00058a fc04
00058b 00fc                      Char_187:                   .db             0x14, 0x14, 0xF4, 0xF4, 0x04, 0xFC, 0xFC, 0x00  ; line, left double down double
00058c 1414
00058d 1717
00058e 1f10
00058f 001f                      Char_188:                   .db             0x14, 0x14, 0x17, 0x17, 0x10, 0x1F, 0x1F, 0x00  ; line, left double up double
000590 1010
000591 1f1f
000592 1f10
000593 001f                      Char_189:                   .db             0x10, 0x10, 0x1F, 0x1F, 0x10, 0x1F, 0x1F, 0x00  ; line, left single up double
000594 1414
000595 1f14
000596 001f
000597 0000                      Char_190:                   .db             0x14, 0x14, 0x14, 0x1F, 0x1F, 0x00, 0x00, 0x00  ; line, left double up single
000598 1010
000599 f010
00059a 00f0
00059b 0000                      Char_191:                   .db             0x10, 0x10, 0x10, 0xF0, 0xF0, 0x00, 0x00, 0x00  ; line, left single down single
00059c 0000
00059d 1f00
00059e 101f
00059f 1010                      Char_192:                   .db             0x00, 0x00, 0x00, 0x1F, 0x1F, 0x10, 0x10, 0x10  ; line, up single right single
0005a0 1010
0005a1 1f10
0005a2 101f
0005a3 1010                      Char_193:                   .db             0x10, 0x10, 0x10, 0x1F, 0x1F, 0x10, 0x10, 0x10  ; line, horizontal single up single
0005a4 1010
0005a5 f010
0005a6 10f0
0005a7 1010                      Char_194:                   .db             0x10, 0x10, 0x10, 0xF0, 0xF0, 0x10, 0x10, 0x10  ; line, horizontal single down single
0005a8 0000
0005a9 ff00
0005aa 10ff
0005ab 1010                      Char_195:                   .db             0x00, 0x00, 0x00, 0xFF, 0xFF, 0x10, 0x10, 0x10  ; line, vertical single right single
0005ac 1010
0005ad 1010
0005ae 1010
0005af 1010                      Char_196:                   .db             0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10  ; line, horizontal
0005b0 1010
0005b1 ff10
0005b2 10ff
0005b3 1010                      Char_197:                   .db             0x10, 0x10, 0x10, 0xFF, 0xFF, 0x10, 0x10, 0x10  ; line, horizontal single vertical single
0005b4 0000
0005b5 ff00
0005b6 14ff
0005b7 1414                      Char_198:                   .db             0x00, 0x00, 0x00, 0xFF, 0xFF, 0x14, 0x14, 0x14  ; line, vertical single right double
0005b8 0000
0005b9 ffff
0005ba ff00
0005bb 10ff                      Char_199:                   .db             0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x10  ; line, vertical double right single
0005bc 0000
0005bd 1f1f
0005be 1710
0005bf 1417                      Char_200:                   .db             0x00, 0x00, 0x1F, 0x1F, 0x10, 0x17, 0x17, 0x14  ; line, up double right double
0005c0 0000
0005c1 fcfc
0005c2 f404
0005c3 14f4                      Char_201:                   .db             0x00, 0x00, 0xFC, 0xFC, 0x04, 0xF4, 0xF4, 0x14  ; line, right double down double
0005c4 1414
0005c5 1717
0005c6 1710
0005c7 1417                      Char_202:                   .db             0x14, 0x14, 0x17, 0x17, 0x10, 0x17, 0x17, 0x14  ; line, horizontal double up double
0005c8 1414
0005c9 f4f4
0005ca f404
0005cb 14f4                      Char_203:                   .db             0x14, 0x14, 0xF4, 0xF4, 0x04, 0xF4, 0xF4, 0x14  ; line, horizontal double down double
0005cc 0000
0005cd ffff
0005ce f700
0005cf 14f7                      Char_204:                   .db             0x00, 0x00, 0xFF, 0xFF, 0x00, 0xF7, 0xF7, 0x14  ; line, vertical double right double
0005d0 1414
0005d1 1414
0005d2 1414
0005d3 1414                      Char_205:                   .db             0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14  ; line, horizontal double
0005d4 1414
0005d5 f7f7
0005d6 f700
0005d7 14f7                      Char_206:                   .db             0x14, 0x14, 0xF7, 0xF7, 0x00, 0xF7, 0xF7, 0x14  ; line, horizontal double vertical double
0005d8 1414
0005d9 1714
0005da 1417
0005db 1414                      Char_207:                   .db             0x14, 0x14, 0x14, 0x17, 0x17, 0x14, 0x14, 0x14  ; line, horizontal double up single
0005dc 1010
0005dd 1f1f
0005de 1f10
0005df 101f                      Char_208:                   .db             0x10, 0x10, 0x1F, 0x1F, 0x10, 0x1F, 0x1F, 0x10  ; line, horizontal single up double
0005e0 1414
0005e1 f414
0005e2 14f4
0005e3 1414                      Char_209:                   .db             0x14, 0x14, 0x14, 0xF4, 0xF4, 0x14, 0x14, 0x14  ; line, horizontal double down single
0005e4 1010
0005e5 f0f0
0005e6 f010
0005e7 10f0                      Char_210:                   .db             0x10, 0x10, 0xF0, 0xF0, 0x10, 0xF0, 0xF0, 0x10  ; line, horizontal single down double
0005e8 0000
0005e9 1f1f
0005ea 1f10
0005eb 101f                      Char_211:                   .db             0x00, 0x00, 0x1F, 0x1F, 0x10, 0x1F, 0x1F, 0x10  ; line, up double right single
0005ec 0000
0005ed 1f00
0005ee 141f
0005ef 1414                      Char_212:                   .db             0x00, 0x00, 0x00, 0x1F, 0x1F, 0x14, 0x14, 0x14  ; line, up single right double
0005f0 0000
0005f1 fc00
0005f2 14fc
0005f3 1414                      Char_213:                   .db             0x00, 0x00, 0x00, 0xFC, 0xFC, 0x14, 0x14, 0x14  ; line, right double down single
0005f4 0000
0005f5 f0f0
0005f6 f010
0005f7 10f0                      Char_214:                   .db             0x00, 0x00, 0xF0, 0xF0, 0x10, 0xF0, 0xF0, 0x10  ; line, right single down double
0005f8 1010
0005f9 ffff
0005fa ff10
0005fb 10ff                      Char_215:                   .db             0x10, 0x10, 0xFF, 0xFF, 0x10, 0xFF, 0xFF, 0x10  ; line, horizontal single vertical double
0005fc 1414
0005fd ff14
0005fe 14ff
0005ff 1414                      Char_216:                   .db             0x14, 0x14, 0x14, 0xFF, 0xFF, 0x14, 0x14, 0x14  ; line, horizontal double vertical single
000600 1010
000601 1f10
000602 001f
000603 0000                      Char_217:                   .db             0x10, 0x10, 0x10, 0x1F, 0x1F, 0x00, 0x00, 0x00  ; line, up single left single
000604 0000
000605 f000
000606 10f0
000607 1010                      Char_218:                   .db             0x00, 0x00, 0x00, 0xF0, 0xF0, 0x10, 0x10, 0x10  ; line, right single down single
000608 ffff
000609 ffff
00060a ffff
00060b ffff                      Char_219:                   .db             0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF  ; block, black
00060c f0f0
00060d f0f0
00060e f0f0
00060f f0f0                      Char_220:                   .db             0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0  ; block, top white bottom black
000610 ffff
000611 ffff
000612 0000
000613 0000                      Char_221:                   .db             0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00  ; block, left black right white
000614 0000
000615 0000
000616 ffff
000617 ffff                      Char_222:                   .db             0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF  ; block, left white right black
000618 0f0f
000619 0f0f
00061a 0f0f
00061b 0f0f                      Char_223:                   .db             0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F  ; block, top black bottom white
00061c 7c38
00061d 6444
00061e 6c38
00061f 0040                      Char_224:                   .db             0x38, 0x7C, 0x44, 0x64, 0x38, 0x6C, 0x40, 0x00  ; alpha
000620 ff7e
000621 4501
000622 7a4f
000623 0030                      Char_225:                   .db             0x7E, 0xFF, 0x01, 0x45, 0x4F, 0x7A, 0x30, 0x00  ; beta
000624 7f41
000625 417f
000626 0101
000627 0003                      Char_226:                   .db             0x41, 0x7F, 0x7F, 0x41, 0x01, 0x01, 0x03, 0x00  ; Gamma
000628 7c08
000629 043c
00062a 3c7c
00062b 0006                      Char_227:                   .db             0x08, 0x7C, 0x3C, 0x04, 0x7C, 0x3C, 0x06, 0x00  ; pi
00062c 6341
00062d 5d77
00062e 4149
00062f 0063                      Char_228:                   .db             0x41, 0x63, 0x77, 0x5D, 0x49, 0x41, 0x63, 0x00  ; Sigma
000630 7c38
000631 4c44
000632 0434
000633 0004                      Char_229:                   .db             0x38, 0x7C, 0x44, 0x4C, 0x34, 0x04, 0x04, 0x00  ; sigma
000634 7cfc
000635 4040
000636 3c7c
000637 0000                      Char_230:                   .db             0xFC, 0x7C, 0x40, 0x40, 0x7C, 0x3C, 0x00, 0x00  ; mu
000638 0c08
000639 7c04
00063a 043c
00063b 0004                      Char_231:                   .db             0x08, 0x0C, 0x04, 0x7C, 0x3C, 0x04, 0x04, 0x00  ; tau
00063c 3c18
00063d ffa5
00063e 3ca5
00063f 0018                      Char_232:                   .db             0x18, 0x3C, 0xA5, 0xFF, 0xA5, 0x3C, 0x18, 0x00  ; Phi
000640 7f3e
000641 4949
000642 7f49
000643 003e                      Char_233:                   .db             0x3E, 0x7F, 0x49, 0x49, 0x49, 0x7F, 0x3E, 0x00  ; theta
000644 5f4e
000645 0171
000646 5f71
000647 004e                      Char_234:                   .db             0x4E, 0x5F, 0x71, 0x01, 0x71, 0x5F, 0x4E, 0x00  ; Omega
000648 7830
000649 4d4b
00064a 397d
00064b 0002                      Char_235:                   .db             0x30, 0x78, 0x4B, 0x4D, 0x7D, 0x39, 0x02, 0x00  ; delta
00064c 2418
00064d 1824
00064e 2418
00064f 1824                      Char_236:                   .db             0x18, 0x24, 0x24, 0x18, 0x18, 0x24, 0x24, 0x18  ; infinity
000650 7458
000651 3c34
000652 2e2c
000653 001a                      Char_237:                   .db             0x58, 0x74, 0x34, 0x3C, 0x2C, 0x2E, 0x1A, 0x00  ; ????
000654 7c38
000655 5454
000656 4454
000657 0000                      Char_238:                   .db             0x38, 0x7C, 0x54, 0x54, 0x54, 0x44, 0x00, 0x00  ; set symbol
000658 7e7c
000659 0202
00065a 7e02
00065b 007c                      Char_239:                   .db             0x7C, 0x7E, 0x02, 0x02, 0x02, 0x7E, 0x7C, 0x00  ; set intersect symbol
00065c 2a2a
00065d 2a2a
00065e 2a2a
00065f 002a                      Char_240:                   .db             0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x00  ; triple equals
000660 4400
000661 5f44
000662 445f
000663 0044                      Char_241:                   .db             0x00, 0x44, 0x44, 0x5F, 0x5F, 0x44, 0x44, 0x00  ; plus/minus
000664 4000
000665 5b51
000666 444e
000667 0000                      Char_242:                   .db             0x00, 0x40, 0x51, 0x5B, 0x4E, 0x44, 0x00, 0x00  ; greater than or equal
000668 4400
000669 5b4e
00066a 4051
00066b 0000                      Char_243:                   .db             0x00, 0x44, 0x4E, 0x5B, 0x51, 0x40, 0x00, 0x00  ; less than or equal
00066c 0000
00066d fe00
00066e 01ff
00066f 0607                      Char_244:                   .db             0x00, 0x00, 0x00, 0xFE, 0xFF, 0x01, 0x07, 0x06  ; integral, top
000670 e060
000671 ff80
000672 007f
000673 0000                      Char_245:                   .db             0x60, 0xE0, 0x80, 0xFF, 0x7F, 0x00, 0x00, 0x00  ; integral, bottom
000674 0800
000675 2a08
000676 082a
000677 0008                      Char_246:                   .db             0x00, 0x08, 0x08, 0x2A, 0x2A, 0x08, 0x08, 0x00  ; division symbol
000678 3624
000679 3612
00067a 3624
00067b 0012                      Char_247:                   .db             0x24, 0x36, 0x12, 0x36, 0x24, 0x36, 0x12, 0x00  ; approximately equal
00067c 0200
00067d 0507
00067e 0207
00067f 0000                      Char_248:                   .db             0x00, 0x02, 0x07, 0x05, 0x07, 0x02, 0x00, 0x00  ; degree symbol
000680 0000
000681 1800
000682 0018
000683 0000                      Char_249:                   .db             0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00  ; dot product
000684 0000
000685 1000
000686 0010
000687 0000                      Char_250:                   .db             0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00  ; dash, tiny
000688 3010
000689 4070
00068a 7f7f
00068b 0101                      Char_251:                   .db             0x10, 0x30, 0x70, 0x40, 0x7F, 0x7F, 0x01, 0x01  ; square root
00068c 0f01
00068d 010e
00068e 0e0f
00068f 0000                      Char_252:                   .db             0x01, 0x0F, 0x0E, 0x01, 0x0F, 0x0E, 0x00, 0x00  ; superscript n
000690 0d0d
000691 0b0b
000692 0000
000693 0000                      Char_253:                   .db             0x0D, 0x0D, 0x0B, 0x0B, 0x00, 0x00, 0x00, 0x00  ; ????
000694 0000
000695 3c3c
000696 3c3c
000697 0000                      Char_254:                   .db             0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00  ; square, small black
000698 0000
000699 0000
00069a 0000
00069b 0000                      Char_255:                   .db             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  ; space
                                 
00069c 38c0
00069d c68c
00069e 83e3
00069f e01c                      earL:						.db				0xC0, 0x38, 0x8C, 0xC6, 0xE3, 0x83, 0x1C, 0xE0
0006a0 c080
0006a1 c0c0
0006a2 c080
0006a3 8080                      top:						.db				0x80, 0xC0, 0xC0, 0xC0, 0x80, 0xC0, 0x80, 0x80
0006a4 1ce0
0006a5 e383
0006a6 8cc6
0006a7 c038                      earR:						.db				0xE0, 0x1C, 0x83, 0xE3, 0xC6, 0x8C, 0x38, 0xC0
0006a8 2cc3
0006a9 1028
0006aa 0000
0006ab 0000                      right1:						.db				0xC3, 0x2C, 0x28, 0x10, 0x00, 0x00, 0x00, 0x00
0006ac 0018
0006ad 0000
0006ae 0000
0006af ff00                      eyeR:						.db				0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF
0006b0 0018
0006b1 0000
0006b2 0000
0006b3 1800                      eyeL:						.db				0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18
0006b4 00ff
0006b5 0000
0006b6 0000
0006b7 1800                      eyeL2:						.db				0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18
0006b8 201f
0006b9 2521
0006ba 2525
0006bb c365                      left2:						.db				0x1F, 0x20, 0x21, 0x25, 0x25, 0x25, 0x65, 0xC3
0006bc 8880
0006bd 8f89
0006be 898f
0006bf 8088                      mouth:						.db				0x80, 0x88, 0x89, 0x8F, 0x8F, 0x89, 0x88, 0x80
0006c0 3543
0006c1 1535
0006c2 1115
0006c3 1f10                      right2:						.db				0x43, 0x35, 0x35, 0x15, 0x15, 0x11, 0x10, 0x1F
                                 
0006c4 2878
0006c5 0078
0006c6 0078
0006c7 0078                      s1:							.db				0x78, 0x28, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00
0006c8 7800
0006c9 0000
0006ca 4038
0006cb 4030                      s2:							.db				0x00, 0x78, 0x00, 0x00, 0x38, 0x40, 0x30, 0x40
0006cc 0038
0006cd 7800
0006ce 7828
0006cf 7800                      s3:							.db				0x38, 0x00, 0x00, 0x78, 0x28, 0x78, 0x00, 0x78
0006d0 2010
0006d1 0078
0006d2 7808
0006d3 0008                      s4:							.db				0x10, 0x20, 0x78, 0x00, 0x08, 0x78, 0x08, 0x00
0006d4 7800
0006d5 4c00
0006d6 6454
0006d7 0000                      s5:							.db				0x00, 0x78, 0x00, 0x4C, 0x54, 0x64, 0x00, 0x00
0006d8 7800
0006d9 7828
0006da 0000
0006db 4878                      s6:							.db				0x00, 0x78, 0x28, 0x78, 0x00, 0x00, 0x78, 0x48
0006dc 0048
0006dd 2878
0006de 0078
0006df 7808                      s7:							.db				0x48, 0x00, 0x78, 0x28, 0x78, 0x00, 0x08, 0x78
0006e0 0008
0006e1 0000
0006e2 0000
0006e3 0000                      s8:							.db				0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 ; Description: calculates exact location in pixel array (X-pointer).
                                 ;              Used to display something at that location.
                                 ;              Note - to find array location: loc = ((y)/8)*WIDTH) + x .
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - r18: pixel grid x position [subroutine does not change]
                                 ;   - r19: pixel grid y position [subroutine does not change]
                                 ; --------------------------------------------------------------------------------
                                 GFX_set_array_pos:     
0006e4 920f                                                  push            r0                                      ; push all used registers to preserve them
0006e5 921f                                                  push            r1
0006e6 930f                                                  push            r16
0006e7 931f                                                  push            r17
0006e8 e1a0                                                  ldi             XL, low(pixel_array<<1)
0006e9 e0b2                                                  ldi             XH, high(pixel_array<<1)
0006ea 2f03                                                  mov             r16, r19                                ; copy y position
0006eb 7007                                                  andi            r16, (HEIGHT-1)/8                       ; get remainder (for vert byte position)
0006ec e840                                                  ldi             r20, 0x80                               ; load a single bit to be rshifted into place (bit order reversed, which is function of the screen)
                                     GFX_set_array_pos_bit_place:
0006ed 3000                                                  cpi             r16, 0x00                               ; are we done shifting?
0006ee f019                                                  breq            GFX_set_array_pos_cont
0006ef 950a                                                  dec             r16                                     ; sub 1 from number of shifts
0006f0 9546                                                  lsr             r20                                     ; shift bit by one
0006f1 cffb                                                  rjmp            GFX_set_array_pos_bit_place
                                     GFX_set_array_pos_cont:
0006f2 2f03                                                  mov             r16, r19                                ; copy y position; will hold result
0006f3 9506                                                  lsr             r16                                     ; i = y/8
0006f4 9506                                                  lsr             r16
0006f5 9506                                                  lsr             r16
0006f6 e810                                                  ldi             r17, WIDTH                              ; prep WIDTH
0006f7 9f01                                                  mul             r16, r17                                ; j = i*W
                                 
0006f8 0e02                                                  add             r0, r18                                 ; loc = j + x
0006f9 f408                                                  brcc            GFX_set_array_pos_end                   ; if a carry, must inc the result's high byte
0006fa 9413                                                  inc             r1
                                     GFX_set_array_pos_end:
0006fb 0da0                                                  add             XL, r0                                  ; add calculated location to pointer
0006fc 1db1                                                  adc             XH, r1
0006fd 911f                                                  pop             r17                                     ; reinstate all pushed registers
0006fe 910f                                                  pop             r16
0006ff 901f                                                  pop             r1
000700 900f                                                  pop             r0
000701 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: blanks an 8pix by 8pix block.
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - X-pointer loaded with location to draw
                                 ; --------------------------------------------------------------------------------
                                 GFX_draw_blank:
000702 930f                                                  push            r16
000703 931f                                                  push            r17
000704 2700                                                  clr             r16
000705 2711                                                  clr             r17
                                     GFX_draw_blank_loop:
000706 931d                                                  st              X+, r17
000707 9503                                                  inc             r16
000708 3008                                                  cpi             r16, 8
000709 f009                                                  breq            GFX_draw_blank_end
00070a cffb                                                  rjmp            GFX_draw_blank_loop
                                     GFX_draw_blank_end:
00070b 911f                                                  pop             r17
00070c 910f                                                  pop             r16
00070d 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: draws character to the array (8pix x 8pix).
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - X-pointer loaded with location to draw
                                 ; --------------------------------------------------------------------------------
                                 GFX_draw_shape:
00070e 930f                                                  push            r16
00070f 931f                                                  push            r17
000710 2700                                                  clr             r16
000711 e0c0                                                  ldi             YL, low(sprite<<1)
000712 e0d2                                                  ldi             YH, high(sprite<<1)
                                     GFX_draw_shape_loop:
000713 9119                                                  ld              r17, Y+
000714 931d                                                  st              X+, r17
000715 9503                                                  inc             r16
000716 3008                                                  cpi             r16, 8
000717 f009                                                  breq            GFX_draw_shape_end
000718 cffa                                                  rjmp            GFX_draw_shape_loop
                                     GFX_draw_shape_end:
000719 911f                                                  pop             r17
00071a 910f                                                  pop             r16
00071b 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sets sprite to whatever char the Z pointer was prepped to.
                                 ;              This should used when you're using the supplied ascii_chars.asm
                                 ;              byte table.
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - Z-pointer: loaded with pmem character location
                                 ; --------------------------------------------------------------------------------
                                 GFX_set_shape:
00071c 930f                                                  push            r16
00071d 931f                                                  push            r17
00071e 2700                                                  clr             r16
00071f e0c0                                                  ldi             YL, low(sprite<<1)
000720 e0d2                                                  ldi             YH, high(sprite<<1)
                                     GFX_set_shape_loop:
000721 9115                                                  lpm             r17, Z+
000722 9319                                                  st              Y+, r17
000723 9503                                                  inc             r16
000724 3008                                                  cpi             r16, 8
000725 f009                                                  breq            GFX_set_shape_end
000726 cffa                                                  rjmp            GFX_set_shape_loop
                                     GFX_set_shape_end:
000727 911f                                                  pop             r17
000728 910f                                                  pop             r16
000729 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: clears array of all information (equivalent to clearing the screen).
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 GFX_clear_array:
00072a 2711                                                  clr             r17
00072b 2722                                                  clr             r18
00072c 2733                                                  clr             r19
00072d e1a0                                                  ldi             XL, low(pixel_array<<1)
00072e e0b2                                                  ldi             XH, high(pixel_array<<1)
                                     GFX_clear_col:                                                                  ; for each col
00072f 3038                                                  cpi             r19, HEIGHT/8
000730 f440                                                  brcc            GFX_clear_done
                                         GFX_clear_row:                                                              ; for each row
000731 3820                                                  cpi             r18, WIDTH
000732 f418                                                  brcc            GFX_clear_nr
000733 931d                                                  st              X+, r17
000734 9523                                                  inc             r18
000735 cffb                                                  rjmp            GFX_clear_row
                                             GFX_clear_nr:                                                           ; move to next row
000736 2722                                                  clr             r18
000737 9533                                                  inc             r19
000738 cff6                                                  rjmp            GFX_clear_col
                                     GFX_clear_done:                                                                 ; done clearing
000739 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328PB" register use summary:
x  :   4 y  :   2 z  :   2 r0 :   4 r1 :   4 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   3 r14:   6 r15:   2 r16:  53 r17:  31 r18:  45 r19:  23 r20:   2 
r21:   0 r22:  28 r23:  12 r24:  12 r25:  25 r26:   5 r27:   5 r28:   2 
r29:   2 r30:  31 r31:  31 
Registers used: 23 out of 35 (65.7%)

"ATmega328PB" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :  27 adiw  :   0 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   5 brcs  :   0 break :   0 breq  :   6 brge  :   2 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   8 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   4 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  11 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   4 cpc   :   0 
cpi   :   9 cpse  :   0 dec   :   9 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  12 inc   :   8 jmp   :   0 
ld    :   2 ldd   :   0 ldi   : 111 lds   :   3 lpm   :   2 lsl   :   0 
lsr   :   8 mov   :   7 movw  :   0 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   0 ori   :   0 out   :   9 pop   :  20 
push  :  20 rcall : 116 ret   :  31 reti  :   0 rjmp  :  15 rol   :   0 
ror   :   4 sbc   :   0 sbci  :   0 sbi   :   5 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   4 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 sts   :   4 
sub   :   2 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 34 out of 113 (30.1%)

"ATmega328PB" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e74    970   2220   3190   32768   9.7%
[.dseg] 0x000100 0x000508      0   1032   1032    2048  50.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
